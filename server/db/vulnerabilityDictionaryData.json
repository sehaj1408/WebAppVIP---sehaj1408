{"88":{"alertType":"Passive","alertOtherInfo":"<a href=\"https:\/\/www.google.com\/search?q=style-src\" target=\"blank\">style-src<\/a> includes <a href=\"https:\/\/www.google.com\/search?q=unsafe-hashes\" target=\"blank\">unsafe-hashes<\/a>, an attacker will be able to use any of the code covered by such <a href=\"https:\/\/www.google.com\/search?q=hashes cyber\" target=\"blank\">hashes<\/a>.","alertName":"CSP: style-src unsafe-hashes","alertSolution":"Ensure that your web server, application server, <a href=\"https:\/\/www.google.com\/search?q=load balancer\" target=\"blank\">load balancer<\/a>, etc. is properly configured to set the <a href=\"https:\/\/www.google.com\/search?q=Content-Security-Policy\" target=\"blank\">Content-Security-Policy<\/a> header.","alertReferences":["https:\/\/www.w3.org\/TR\/CSP3\/#unsafe-hashes-usage","https:\/\/content-security-policy.com\/examples\/allow-inline-style\/"],"alertTechTargeted":"All","alertCWEID":"693","alertID":"10055-8","alertWASCID":"15","alertRisk":"Medium","alertSummary":"<a href=\"https:\/\/www.google.com\/search?q=Content Security Policy\" target=\"blank\">Content Security Policy<\/a> (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks. Including (but not limited to) <a href=\"https:\/\/www.google.com\/search?q=Cross Site Scripting\" target=\"blank\">Cross Site Scripting<\/a> (XSS), and <a href=\"https:\/\/www.google.com\/search?q=data injection attacks\" target=\"blank\">data injection attacks<\/a>. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files."},"89":{"alertType":"Passive","alertOtherInfo":"A non-<a href=\"https:\/\/www.google.com\/search?q=ASCII\" target=\"blank\">ASCII<\/a> character was encountered while attempting to parse the policy, thus rendering it invalid (no further evaluation occurred). The following invalid characters were collected: \u2018\u2019","alertName":"CSP: Malformed Policy (Non-ASCII)","alertSolution":"Ensure that your web server, application server, <a href=\"https:\/\/www.google.com\/search?q=load balancer\" target=\"blank\">load balancer<\/a>, etc. is properly configured to set the <a href=\"https:\/\/www.google.com\/search?q=Content-Security-Policy\" target=\"blank\">Content-Security-Policy<\/a> header.","alertReferences":["https:\/\/www.w3.org\/TR\/CSP\/","https:\/\/caniuse.com\/#search=content+security+policy","https:\/\/content-security-policy.com\/","https:\/\/github.com\/HtmlUnit\/htmlunit-csp","https:\/\/developers.google.com\/web\/fundamentals\/security\/csp#policy_applies_to_a_wide_variety_of_resources"],"alertTechTargeted":"All","alertCWEID":"693","alertID":"10055-9","alertWASCID":"15","alertRisk":"Medium","alertSummary":"<a href=\"https:\/\/www.google.com\/search?q=Content Security Policy\" target=\"blank\">Content Security Policy<\/a> (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks. Including (but not limited to) <a href=\"https:\/\/www.google.com\/search?q=Cross Site Scripting\" target=\"blank\">Cross Site Scripting<\/a> (XSS), and <a href=\"https:\/\/www.google.com\/search?q=data injection attacks\" target=\"blank\">data injection attacks<\/a>. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files."},"110":{"alertType":"Active","alertOtherInfo":"N\/A","alertName":"Remote Code Execution - CVE-2012-1823","alertSolution":"Phase: Architecture and Design  Use an input validation framework such as <a href=\"https:\/\/www.google.com\/search?q=Struts framework\" target=\"blank\">Struts<\/a> or the <a href=\"https:\/\/www.google.com\/search?q=OWASP ESAPI Validation API\" target=\"blank\">OWASP ESAPI Validation API<\/a>.  Understand all the potential areas where untrusted inputs can enter your software: parameters or arguments, cookies, anything read from the network, environment variables, <a href=\"https:\/\/www.google.com\/search?q=reverse DNS lookups\" target=\"blank\">reverse DNS lookups<\/a>, query results, request headers, URL components, e-mail, files, databases, and any external systems that provide data to the application. Remember that such inputs may be obtained indirectly through API calls.  For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.  Even though client-side checks provide minimal benefits with respect to server-side security, they are still useful. First, they can support intrusion detection. If the server receives input that should have been rejected by the client, then it may be an indication of an attack. Second, client-side error-checking can provide helpful feedback to the user about the expectations for valid input. Third, there may be a reduction in server-side processing time for accidental input errors, although this is typically a small savings.  Do not rely exclusively on deny list validation to detect malicious input or to encode output. There are too many ways to encode the same character, so you're likely to miss some variants.  When your application combines data from multiple sources, perform the validation after the sources have been combined. The individual data elements may pass the validation step but violate the intended restrictions after they have been combined.  Assume all input is malicious. Use an \"<a href=\"https:\/\/www.google.com\/search?q=accept known good\" target=\"blank\">accept known good<\/a>\" <a href=\"https:\/\/www.google.com\/search?q=input validation\" target=\"blank\">input validation<\/a> strategy, i.e., use an allow list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a deny list). However, deny lists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.  When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if you are expecting colors such as \"red\" or \"blue.\"  Phase: Implementation  Be especially careful to validate your input when you invoke code that crosses language boundaries, such as from an interpreted language to native code. This could create an unexpected interaction between the language boundaries. Ensure that you are not violating any of the expectations of the language with which you are interfacing. For example, even though Java may not be susceptible to buffer overflows, providing a large argument in a call to native code might trigger an overflow.  Directly convert your input type into the expected data type, such as using a conversion function that translates a string into a number. After converting to the expected data type, ensure that the input's values fall within the expected range of allowable values and that multi-field consistencies are maintained.  Inputs should be decoded and <a href=\"https:\/\/www.google.com\/search?q=canonicalized\" target=\"blank\">canonicalized<\/a> to the application's current internal representation before being validated. Make sure that your application does not inadvertently decode the same input twice. Such errors could be used to bypass allow list schemes by introducing dangerous inputs after they have been checked. Use libraries such as the <a href=\"https:\/\/www.google.com\/search?q=OWASP ESAPI Canonicalization control\" target=\"blank\">OWASP ESAPI Canonicalization control<\/a>.  Consider performing repeated canonicalization until your input does not change any more. This will avoid double-decoding and similar scenarios, but it might inadvertently modify inputs that are allowed to contain properly-encoded dangerous content.  When exchanging data between components, ensure that both components are using the same character encoding. Ensure that the proper encoding is applied at each interface. Explicitly set the encoding you are using whenever the protocol allows you to do so.","alertReferences":["https:\/\/owasp.org\/www-community\/vulnerabilities\/Improper_Data_Validation","https:\/\/cheatsheetseries.owasp.org\/cheatsheets\/Input_Validation_Cheat_Sheet.html","https:\/\/cwe.mitre.org\/data\/definitions\/89.html"],"alertTechTargeted":"Language \/ PHP","alertCWEID":"20","alertID":"20018","alertWASCID":"20","alertRisk":"High","alertSummary":"Improper input handling is one of the most common weaknesses identified across applications today. Poorly handled input is a leading cause behind critical vulnerabilities that exist in systems and applications."},"111":{"alertType":"Active","alertOtherInfo":"N\/A","alertName":"External Redirect","alertSolution":"N\/A","alertReferences":"N\/A","alertTechTargeted":"N\/A","alertCWEID":"N\/A","alertID":"20019","alertWASCID":"N\/A","alertRisk":"N\/A","alertSummary":"See child errors."},"112":{"alertType":"Active","alertOtherInfo":"The response contains a redirect in its Location header which allows an external Url to be set.","alertName":"External Redirect","alertSolution":"Assume all input is malicious. Use an \"<a href=\"https:\/\/www.google.com\/search?q=accept known good\" target=\"blank\">accept known good<\/a>\" <a href=\"https:\/\/www.google.com\/search?q=input validation\" target=\"blank\">input validation<\/a> strategy, i.e., use an allow list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a deny list). However, deny lists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.  When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if you are expecting colors such as \"red\" or \"blue.\"  Use an allow list of approved URLs or domains to be used for redirection.  Use an intermediate disclaimer page that provides the user with a clear warning that they are leaving your site. Implement a long timeout before the redirect occurs, or force the user to click on the link. Be careful to avoid <a href=\"https:\/\/www.google.com\/search?q=XSS\" target=\"blank\">XSS<\/a> problems when generating the disclaimer page.  When the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs.  For example, ID 1 could map to \"\/login.asp\" and ID 2 could map to \"https:\/\/www.example.com\/\". Features such as the <a href=\"https:\/\/www.google.com\/search?q=ESAPI AccessReferenceMap\" target=\"blank\">ESAPI AccessReferenceMap<\/a> provide this capability.  Understand all the potential areas where untrusted inputs can enter your software: parameters or arguments, cookies, anything read from the network, environment variables, <a href=\"https:\/\/www.google.com\/search?q=reverse DNS lookups\" target=\"blank\">reverse DNS lookups<\/a>, query results, request headers, URL components, e-mail, files, databases, and any external systems that provide data to the application. Remember that such inputs may be obtained indirectly through API calls.  Many open redirect problems occur because the programmer assumed that certain inputs could not be modified, such as cookies and hidden form fields.","alertReferences":["https:\/\/cheatsheetseries.owasp.org\/cheatsheets\/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html","https:\/\/cwe.mitre.org\/data\/definitions\/601.html"],"alertTechTargeted":"All","alertCWEID":"601","alertID":"20019-1","alertWASCID":"38","alertRisk":"High","alertSummary":"URL redirectors represent common functionality employed by web sites to forward an incoming request to an alternate resource. This can be done for a variety of reasons and is often done to allow resources to be moved within the directory structure and to avoid breaking functionality for users that request the resource at its previous location. URL redirectors may also be used to implement <a href=\"https:\/\/www.google.com\/search?q=load balancing\" target=\"blank\">load balancing<\/a>, leveraging abbreviated URLs or recording outgoing links. It is this last implementation which is often used in <a href=\"https:\/\/www.google.com\/search?q=phishing\" target=\"blank\">phishing<\/a> attacks as described in the example below. URL redirectors do not necessarily represent a direct security vulnerability but can be abused by attackers trying to social engineer victims into believing that they are navigating to a site other than the true destination."},"113":{"alertType":"Active","alertOtherInfo":"The response contains a redirect in its Refresh header which allows an external Url to be set.","alertName":"External Redirect","alertSolution":"Assume all input is malicious. Use an \"<a href=\"https:\/\/www.google.com\/search?q=accept known good\" target=\"blank\">accept known good<\/a>\" <a href=\"https:\/\/www.google.com\/search?q=input validation\" target=\"blank\">input validation<\/a> strategy, i.e., use an allow list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a deny list). However, deny lists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.  When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if you are expecting colors such as \"red\" or \"blue.\"  Use an allow list of approved URLs or domains to be used for redirection.  Use an intermediate disclaimer page that provides the user with a clear warning that they are leaving your site. Implement a long timeout before the redirect occurs, or force the user to click on the link. Be careful to avoid <a href=\"https:\/\/www.google.com\/search?q=XSS\" target=\"blank\">XSS<\/a> problems when generating the disclaimer page.  When the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs.  For example, ID 1 could map to \"\/login.asp\" and ID 2 could map to \"https:\/\/www.example.com\/\". Features such as the <a href=\"https:\/\/www.google.com\/search?q=ESAPI AccessReferenceMap\" target=\"blank\">ESAPI AccessReferenceMap<\/a> provide this capability.  Understand all the potential areas where untrusted inputs can enter your software: parameters or arguments, cookies, anything read from the network, environment variables, <a href=\"https:\/\/www.google.com\/search?q=reverse DNS lookups\" target=\"blank\">reverse DNS lookups<\/a>, query results, request headers, URL components, e-mail, files, databases, and any external systems that provide data to the application. Remember that such inputs may be obtained indirectly through API calls.  Many open redirect problems occur because the programmer assumed that certain inputs could not be modified, such as cookies and hidden form fields.","alertReferences":["https:\/\/cheatsheetseries.owasp.org\/cheatsheets\/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html","https:\/\/cwe.mitre.org\/data\/definitions\/601.html"],"alertTechTargeted":"All","alertCWEID":"601","alertID":"20019-2","alertWASCID":"38","alertRisk":"High","alertSummary":"URL redirectors represent common functionality employed by web sites to forward an incoming request to an alternate resource. This can be done for a variety of reasons and is often done to allow resources to be moved within the directory structure and to avoid breaking functionality for users that request the resource at its previous location. URL redirectors may also be used to implement <a href=\"https:\/\/www.google.com\/search?q=load balancing\" target=\"blank\">load balancing<\/a>, leveraging abbreviated URLs or recording outgoing links. It is this last implementation which is often used in <a href=\"https:\/\/www.google.com\/search?q=phishing\" target=\"blank\">phishing<\/a> attacks as described in the example below. URL redirectors do not necessarily represent a direct security vulnerability but can be abused by attackers trying to social engineer victims into believing that they are navigating to a site other than the true destination."},"114":{"alertType":"Active","alertOtherInfo":"The response contains a redirect in its meta http-equiv tag for 'Refresh' which allows an external Url to be set.","alertName":"External Redirect","alertSolution":"Assume all input is malicious. Use an \"<a href=\"https:\/\/www.google.com\/search?q=accept known good\" target=\"blank\">accept known good<\/a>\" <a href=\"https:\/\/www.google.com\/search?q=input validation\" target=\"blank\">input validation<\/a> strategy, i.e., use an allow list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a deny list). However, deny lists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.  When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if you are expecting colors such as \"red\" or \"blue.\"  Use an allow list of approved URLs or domains to be used for redirection.  Use an intermediate disclaimer page that provides the user with a clear warning that they are leaving your site. Implement a long timeout before the redirect occurs, or force the user to click on the link. Be careful to avoid <a href=\"https:\/\/www.google.com\/search?q=XSS\" target=\"blank\">XSS<\/a> problems when generating the disclaimer page.  When the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs.  For example, ID 1 could map to \"\/login.asp\" and ID 2 could map to \"https:\/\/www.example.com\/\". Features such as the <a href=\"https:\/\/www.google.com\/search?q=ESAPI AccessReferenceMap\" target=\"blank\">ESAPI AccessReferenceMap<\/a> provide this capability.  Understand all the potential areas where untrusted inputs can enter your software: parameters or arguments, cookies, anything read from the network, environment variables, <a href=\"https:\/\/www.google.com\/search?q=reverse DNS lookups\" target=\"blank\">reverse DNS lookups<\/a>, query results, request headers, URL components, e-mail, files, databases, and any external systems that provide data to the application. Remember that such inputs may be obtained indirectly through API calls.  Many open redirect problems occur because the programmer assumed that certain inputs could not be modified, such as cookies and hidden form fields.","alertReferences":["https:\/\/cheatsheetseries.owasp.org\/cheatsheets\/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html","https:\/\/cwe.mitre.org\/data\/definitions\/601.html"],"alertTechTargeted":"All","alertCWEID":"601","alertID":"20019-3","alertWASCID":"38","alertRisk":"High","alertSummary":"URL redirectors represent common functionality employed by web sites to forward an incoming request to an alternate resource. This can be done for a variety of reasons and is often done to allow resources to be moved within the directory structure and to avoid breaking functionality for users that request the resource at its previous location. URL redirectors may also be used to implement <a href=\"https:\/\/www.google.com\/search?q=load balancing\" target=\"blank\">load balancing<\/a>, leveraging abbreviated URLs or recording outgoing links. It is this last implementation which is often used in <a href=\"https:\/\/www.google.com\/search?q=phishing\" target=\"blank\">phishing<\/a> attacks as described in the example below. URL redirectors do not necessarily represent a direct security vulnerability but can be abused by attackers trying to social engineer victims into believing that they are navigating to a site other than the true destination."},"115":{"alertType":"Active","alertOtherInfo":"The response contains a redirect in its JavaScript code which allows an external Url to be set.","alertName":"External Redirect","alertSolution":"Assume all input is malicious. Use an \"<a href=\"https:\/\/www.google.com\/search?q=accept known good\" target=\"blank\">accept known good<\/a>\" <a href=\"https:\/\/www.google.com\/search?q=input validation\" target=\"blank\">input validation<\/a> strategy, i.e., use an allow list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a deny list). However, deny lists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.  When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if you are expecting colors such as \"red\" or \"blue.\"  Use an allow list of approved URLs or domains to be used for redirection.  Use an intermediate disclaimer page that provides the user with a clear warning that they are leaving your site. Implement a long timeout before the redirect occurs, or force the user to click on the link. Be careful to avoid <a href=\"https:\/\/www.google.com\/search?q=XSS\" target=\"blank\">XSS<\/a> problems when generating the disclaimer page.  When the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs.  For example, ID 1 could map to \"\/login.asp\" and ID 2 could map to \"https:\/\/www.example.com\/\". Features such as the <a href=\"https:\/\/www.google.com\/search?q=ESAPI AccessReferenceMap\" target=\"blank\">ESAPI AccessReferenceMap<\/a> provide this capability.  Understand all the potential areas where untrusted inputs can enter your software: parameters or arguments, cookies, anything read from the network, environment variables, <a href=\"https:\/\/www.google.com\/search?q=reverse DNS lookups\" target=\"blank\">reverse DNS lookups<\/a>, query results, request headers, URL components, e-mail, files, databases, and any external systems that provide data to the application. Remember that such inputs may be obtained indirectly through API calls.  Many open redirect problems occur because the programmer assumed that certain inputs could not be modified, such as cookies and hidden form fields.","alertReferences":["https:\/\/cheatsheetseries.owasp.org\/cheatsheets\/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html","https:\/\/cwe.mitre.org\/data\/definitions\/601.html"],"alertTechTargeted":"All","alertCWEID":"601","alertID":"20019-4","alertWASCID":"38","alertRisk":"High","alertSummary":"URL redirectors represent common functionality employed by web sites to forward an incoming request to an alternate resource. This can be done for a variety of reasons and is often done to allow resources to be moved within the directory structure and to avoid breaking functionality for users that request the resource at its previous location. URL redirectors may also be used to implement <a href=\"https:\/\/www.google.com\/search?q=load balancing\" target=\"blank\">load balancing<\/a>, leveraging abbreviated URLs or recording outgoing links. It is this last implementation which is often used in <a href=\"https:\/\/www.google.com\/search?q=phishing\" target=\"blank\">phishing<\/a> attacks as described in the example below. URL redirectors do not necessarily represent a direct security vulnerability but can be abused by attackers trying to social engineer victims into believing that they are navigating to a site other than the true destination."},"116":{"alertType":"Active","alertOtherInfo":"Potential <a href=\"https:\/\/www.google.com\/search?q=Buffer Overflow\" target=\"blank\">Buffer Overflow<\/a>.  The script closed the connection and threw a <a href=\"https:\/\/www.google.com\/search?q=500 Internal Server Error\" target=\"blank\">500 Internal Server Error<\/a>","alertName":"Buffer Overflow","alertSolution":"Rewrite the background program using proper return length checking.  This will require a recompile of the background executable.","alertReferences":["https:\/\/owasp.org\/www-community\/attacks\/Buffer_overflow_attack"],"alertTechTargeted":"Language \/ C","alertCWEID":"120","alertID":"30001","alertWASCID":"7","alertRisk":"Medium","alertSummary":"<a href=\"https:\/\/www.google.com\/search?q=Buffer overflow errors\" target=\"blank\">Buffer overflow errors<\/a> are characterized by the overwriting of memory spaces of the background web process, which should have never been modified intentionally or unintentionally. Overwriting values of the IP (<a href=\"https:\/\/www.google.com\/search?q=Instruction Pointer\" target=\"blank\">Instruction Pointer<\/a>), BP (<a href=\"https:\/\/www.google.com\/search?q=Base Pointer\" target=\"blank\">Base Pointer<\/a>) and other registers causes exceptions, segmentation faults, and other process errors to occur. Usually these errors end execution of the application in an unexpected way."},"90":{"alertType":"Passive","alertOtherInfo":"<a href=\"https:\/\/www.google.com\/search?q=script-src\" target=\"blank\">script-src<\/a> includes <a href=\"https:\/\/www.google.com\/search?q=unsafe-eval\" target=\"blank\">unsafe-eval<\/a>.","alertName":"CSP: script-src unsafe-eval","alertSolution":"Ensure that your web server, application server, <a href=\"https:\/\/www.google.com\/search?q=load balancer\" target=\"blank\">load balancer<\/a>, etc. is properly configured to set the <a href=\"https:\/\/www.google.com\/search?q=Content-Security-Policy\" target=\"blank\">Content-Security-Policy<\/a> header.","alertReferences":["https:\/\/www.w3.org\/TR\/CSP\/","https:\/\/caniuse.com\/#search=content+security+policy","https:\/\/content-security-policy.com\/","https:\/\/github.com\/HtmlUnit\/htmlunit-csp","https:\/\/developers.google.com\/web\/fundamentals\/security\/csp#policy_applies_to_a_wide_variety_of_resources"],"alertTechTargeted":"All","alertCWEID":"693","alertID":"10055-10","alertWASCID":"15","alertRisk":"Medium","alertSummary":"<a href=\"https:\/\/www.google.com\/search?q=Content Security Policy\" target=\"blank\">Content Security Policy<\/a> (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks. Including (but not limited to) <a href=\"https:\/\/www.google.com\/search?q=Cross Site Scripting\" target=\"blank\">Cross Site Scripting<\/a> (XSS), and <a href=\"https:\/\/www.google.com\/search?q=data injection\" target=\"blank\">data injection<\/a> attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files."},"117":{"alertType":"Active","alertOtherInfo":"Potential Format String Error.  The script closed the connection on a \/%s","alertName":"Format String Error","alertSolution":"Rewrite the background program using proper deletion of bad character strings.  This will require a recompile of the background executable.","alertReferences":["https:\/\/owasp.org\/www-community\/attacks\/Format_string_attack"],"alertTechTargeted":"Language \/ C","alertCWEID":"134","alertID":"30002","alertWASCID":"6","alertRisk":"Medium","alertSummary":"A <a href=\"https:\/\/www.google.com\/search?q=Format String error\" target=\"blank\">Format String error<\/a> occurs when the submitted data of an input string is evaluated as a command by the application."},"91":{"alertType":"Passive","alertOtherInfo":"N\/A","alertName":"CSP: Meta Policy Invalid Directive","alertSolution":"Ensure that your web server, application server, <a href=\"https:\/\/www.google.com\/search?q=load balancer\" target=\"blank\">load balancer<\/a>, etc. is properly configured to set the <a href=\"https:\/\/www.google.com\/search?q=Content-Security-Policy\" target=\"blank\">Content-Security-Policy<\/a> header.","alertReferences":["https:\/\/www.w3.org\/TR\/CSP\/","https:\/\/caniuse.com\/#search=content+security+policy","https:\/\/content-security-policy.com\/","https:\/\/github.com\/HtmlUnit\/htmlunit-csp","https:\/\/developers.google.com\/web\/fundamentals\/security\/csp#policy_applies_to_a_wide_variety_of_resources"],"alertTechTargeted":"All","alertCWEID":"693","alertID":"10055-11","alertWASCID":"15","alertRisk":"Medium","alertSummary":"The policy specified via <a href=\"https:\/\/www.google.com\/search?q=meta element\" target=\"blank\">meta element<\/a> contains either or both the <a href=\"https:\/\/www.google.com\/search?q=sandbox directive\" target=\"blank\">sandbox<\/a> or <a href=\"https:\/\/www.google.com\/search?q=frame-ancestors directive\" target=\"blank\">frame-ancestors directive<\/a>, which are not permitted inside meta CSP definitions."},"118":{"alertType":"Active","alertOtherInfo":"N\/A","alertName":"CRLF Injection","alertSolution":"Type check the submitted parameter carefully. Do not allow <a href=\"https:\/\/www.google.com\/search?q=CRLF\" target=\"blank\">CRLF<\/a> to be injected by filtering CRLF.","alertReferences":["https:\/\/owasp.org\/www-community\/vulnerabilities\/CRLF_Injection","https:\/\/cwe.mitre.org\/data\/definitions\/113.html"],"alertTechTargeted":"All","alertCWEID":"113","alertID":"40003","alertWASCID":"25","alertRisk":"Medium","alertSummary":"Cookie can be set via <a href=\"https:\/\/www.google.com\/search?q=CRLF injection\" target=\"blank\">CRLF injection<\/a>.  It may also be possible to set arbitrary HTTP response headers. In addition, by carefully crafting the injected response using <a href=\"https:\/\/www.google.com\/search?q=cross-site script\" target=\"blank\">cross-site script<\/a>, <a href=\"https:\/\/www.google.com\/search?q=cache poisoning vulnerability\" target=\"blank\">cache poisoning vulnerability<\/a> may also exist."},"92":{"alertType":"Passive","alertOtherInfo":"N\/A","alertName":"CSP: Header & Meta","alertSolution":"Ensure that your web server, application server, <a href=\"https:\/\/www.google.com\/search?q=load balancer\" target=\"blank\">load balancer<\/a>, etc. is properly configured to set the <a href=\"https:\/\/www.google.com\/search?q=Content-Security-Policy\" target=\"blank\">Content-Security-Policy<\/a> header.","alertReferences":["https:\/\/www.w3.org\/TR\/CSP\/","https:\/\/caniuse.com\/#search=content+security+policy","https:\/\/content-security-policy.com\/","https:\/\/github.com\/HtmlUnit\/htmlunit-csp","https:\/\/developers.google.com\/web\/fundamentals\/security\/csp#policy_applies_to_a_wide_variety_of_resources"],"alertTechTargeted":"All","alertCWEID":"693","alertID":"10055-12","alertWASCID":"15","alertRisk":"Informational","alertSummary":"The message contained both CSP specified via header and via Meta tag. It was not possible to union these policies in order to perform an analysis. Therefore, they have been evaluated individually."},"119":{"alertType":"Active","alertOtherInfo":"N\/A","alertName":"Parameter Tampering","alertSolution":"Identify the cause of the error and fix it.  Do not trust client side input and enforce a tight check in the server side.  Besides, catch the exception properly.  Use a generic <a href=\"https:\/\/www.google.com\/search?q=500 error\" target=\"blank\">500 error<\/a> page for internal server error.","alertReferences":"N\/A","alertTechTargeted":"All","alertCWEID":"472","alertID":"40008","alertWASCID":"20","alertRisk":"Medium","alertSummary":"Parameter manipulation caused an error page or Java stack trace to be displayed.  This indicated lack of exception handling and potential areas for further exploit."},"93":{"alertType":"Passive","alertOtherInfo":"By accessing a URL in the form http:\/\/target_host\/_profiler\/token_value (i.e.: http:\/\/example.com\/_profiler_\/123ab4), you may gain access to the profiler and further leaked information.","alertName":"X-Debug-Token Information Leak","alertSolution":"Limit access to <a href=\"https:\/\/www.google.com\/search?q=Symfony's Profiler\" target=\"blank\">Symfony's Profiler<\/a>, either via authentication\/authorization or limiting inclusion of the header to specific clients (by IP, etc.).","alertReferences":["https:\/\/symfony.com\/doc\/current\/cookbook\/profiler\/profiling_data.html","https:\/\/symfony.com\/blog\/new-in-symfony-2-4-quicker-access-to-the-profiler-when-working-on-an-api"],"alertTechTargeted":"All","alertCWEID":"200","alertID":"10056","alertWASCID":"13","alertRisk":"Low","alertSummary":"The response contained an <a href=\"https:\/\/www.google.com\/search?q=X-Debug-Token\" target=\"blank\">X-Debug-Token<\/a> or <a href=\"https:\/\/www.google.com\/search?q=X-Debug-Token-Link\" target=\"blank\">X-Debug-Token-Link<\/a> header. This indicates that <a href=\"https:\/\/www.google.com\/search?q=Symfony\u2019s Profiler\" target=\"blank\">Symfony\u2019s Profiler<\/a> may be in use and exposing sensitive data."},"94":{"alertType":"Passive","alertOtherInfo":"The <a href=\"https:\/\/www.google.com\/search?q=hash cyber\" target=\"blank\">hash<\/a> was an <a href=\"https:\/\/www.google.com\/search?q=SHA1\" target=\"blank\">SHA1<\/a>, with value: d033e22ae348aeb5660fc2140aec35850c4da997","alertName":"Username Hash Found","alertSolution":"Use per user or session indirect object references (create a temporary mapping at time of use). Or, ensure that each use of a direct object reference is tied to an authorization check to ensure the user is authorized for the requested object.","alertReferences":["https:\/\/owasp.org\/www-project-web-security-testing-guide\/v41\/4-Web_Application_Security_Testing\/05-Authorization_Testing\/04-Testing_for_Insecure_Direct_Object_References.html"],"alertTechTargeted":"All","alertCWEID":"284","alertID":"10057","alertWASCID":"2","alertRisk":"Informational","alertSummary":"A <a href=\"https:\/\/www.google.com\/search?q=hash cyber\" target=\"blank\">hash<\/a> of a username (admin) was found in the response. This may indicate that the application is subject to an <a href=\"https:\/\/www.google.com\/search?q=Insecure Direct Object Reference\" target=\"blank\">Insecure Direct Object Reference<\/a> (IDOR) vulnerability. Manual testing will be required to see if this discovery can be abused."},"95":{"alertType":"Active","alertOtherInfo":"N\/A","alertName":"GET for POST","alertSolution":"Ensure that only POST is accepted where POST is expected.","alertReferences":"N\/A","alertTechTargeted":"All","alertCWEID":"16","alertID":"10058","alertWASCID":"20","alertRisk":"Informational","alertSummary":"A request that was originally observed as a POST was also accepted as a GET. This issue does not represent a security weakness unto itself, however, it may facilitate simplification of other attacks. For example if the original POST is subject to <a href=\"https:\/\/www.google.com\/search?q=Cross-Site Scripting\" target=\"blank\">Cross-Site Scripting<\/a> (XSS), then this finding may indicate that a simplified (GET based) XSS may also be possible."},"96":{"alertType":"Passive","alertOtherInfo":"An attacker can use this information to exploit known vulnerabilities.","alertName":"X-AspNet-Version Response Header","alertSolution":"Configure the server so it will not return those headers.","alertReferences":["https:\/\/www.troyhunt.com\/shhh-dont-let-your-response-headers\/","https:\/\/blogs.msdn.microsoft.com\/varunm\/2013\/04\/23\/remove-unwanted-http-response-headers\/"],"alertTechTargeted":"All","alertCWEID":"933","alertID":"10061","alertWASCID":"14","alertRisk":"Low","alertSummary":"Server leaks information via \u201C<a href=\"https:\/\/www.google.com\/search?q=X-AspNet-Version\" target=\"blank\">X-AspNet-Version<\/a>\u201D\/\u201C<a href=\"https:\/\/www.google.com\/search?q=X-AspNetMvc-Version\" target=\"blank\">X-AspNetMvc-Version<\/a>\u201D HTTP response header field(s)."},"97":{"alertType":"Passive","alertOtherInfo":"Credit Card Type detected: Visa Bank Identification Number: 471618 Brand: VISA Category: PURCHASING Issuer: U.S. BANK N.A. ND","alertName":"PII Disclosure","alertSolution":"Check the response for the potential presence of personally identifiable information (PII), ensure nothing sensitive is leaked by the application.","alertReferences":"N\/A","alertTechTargeted":"All","alertCWEID":"359","alertID":"10062","alertWASCID":"13","alertRisk":"High","alertSummary":"The response contains Personally Identifiable Information, such as CC number, SSN and similar sensitive data."},"10":{"alertType":"Active","alertOtherInfo":"N\/A","alertName":"Path Traversal","alertSolution":"Assume all input is malicious. Use an \"<a href=\"https:\/\/www.google.com\/search?q=accept known good\" target=\"blank\">accept known good<\/a>\" <a href=\"https:\/\/www.google.com\/search?q=input validation\" target=\"blank\">input validation<\/a> strategy, i.e., use an allow list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a deny list). However, deny lists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.  When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if you are expecting colors such as \"red\" or \"blue.\"  For filenames, use stringent allow lists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses, and exclude directory separators such as \"\/\". Use an allow list of allowable file extensions.  Warning: if you attempt to cleanse your data, then do so that the end result is not in the form that can be dangerous. A sanitizing mechanism can remove characters such as '.' and ';' which may be required for some exploits. An attacker can try to fool the sanitizing mechanism into \"cleaning\" data into a dangerous form. Suppose the attacker injects a '.' inside a filename (e.g. \"sensi.tiveFile\") and the sanitizing mechanism removes the character resulting in the valid filename, \"sensitiveFile\". If the input data are now assumed to be safe, then the file may be compromised.   Inputs should be decoded and <a href=\"https:\/\/www.google.com\/search?q=canonicalized\" target=\"blank\">canonicalized<\/a> to the application's current internal representation before being validated. Make sure that your application does not decode the same input twice. Such errors could be used to bypass allow list schemes by introducing dangerous inputs after they have been checked.  Use a built-in path canonicalization function (such as <a href=\"https:\/\/www.google.com\/search?q=realpath()\" target=\"blank\">realpath()<\/a> in C) that produces the canonical version of the pathname, which effectively removes \"..\" sequences and symbolic links.  Run your code using the lowest privileges that are required to accomplish the necessary tasks. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.  When the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs.  Run your code in a \"jail\" or similar <a href=\"https:\/\/www.google.com\/search?q=sandbox environment\" target=\"blank\">sandbox environment<\/a> that enforces strict boundaries between the process and the operating system. This may effectively restrict which files can be accessed in a particular directory or which commands can be executed by your software.  OS-level examples include the <a href=\"https:\/\/www.google.com\/search?q=Unix chroot jail\" target=\"blank\">Unix chroot jail<\/a>, <a href=\"https:\/\/www.google.com\/search?q=AppArmor\" target=\"blank\">AppArmor<\/a>, and <a href=\"https:\/\/www.google.com\/search?q=SELinux\" target=\"blank\">SELinux<\/a>. In general, managed code may provide some protection. For example, <a href=\"https:\/\/www.google.com\/search?q=java.io.FilePermission\" target=\"blank\">java.io.FilePermission<\/a> in the <a href=\"https:\/\/www.google.com\/search?q=Java SecurityManager\" target=\"blank\">Java SecurityManager<\/a> allows you to specify restrictions on file operations.  This may not be a feasible solution, and it only limits the impact to the operating system; the rest of your application may still be subject to compromise.","alertReferences":["https:\/\/owasp.org\/www-community\/attacks\/Path_Traversal","https:\/\/cwe.mitre.org\/data\/definitions\/22.html"],"alertTechTargeted":"All","alertCWEID":"22","alertID":"6-4","alertWASCID":"33","alertRisk":"High","alertSummary":"The Path Traversal attack technique allows an attacker access to files, directories, and commands that potentially reside outside the web <a href=\"https:\/\/www.google.com\/search?q=document root\" target=\"blank\">document root<\/a> directory. An attacker may manipulate a URL in such a way that the web site will execute or reveal the contents of arbitrary files anywhere on the web server. Any device that exposes an HTTP-based interface is potentially vulnerable to Path Traversal."},"98":{"alertType":"Passive","alertOtherInfo":"1704114087, which evaluates to: 1970-01-20 17:21:54","alertName":"Timestamp Disclosure - Unix","alertSolution":"Manually confirm that the timestamp data is not sensitive, and that the data cannot be aggregated to disclose exploitable patterns.","alertReferences":["https:\/\/cwe.mitre.org\/data\/definitions\/200.html"],"alertTechTargeted":"All","alertCWEID":"200","alertID":"10096","alertWASCID":"13","alertRisk":"Low","alertSummary":"A timestamp was disclosed by the application\/web server - Unix"},"11":{"alertType":"Active","alertOtherInfo":"N\/A","alertName":"Path Traversal","alertSolution":"Assume all input is malicious. Use an \"<a href=\"https:\/\/www.google.com\/search?q=accept known good\" target=\"blank\">accept known good<\/a>\" <a href=\"https:\/\/www.google.com\/search?q=input validation\" target=\"blank\">input validation<\/a> strategy, i.e., use an allow list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a deny list). However, deny lists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.  When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if you are expecting colors such as \"red\" or \"blue.\"  For filenames, use stringent allow lists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses, and exclude directory separators such as \"\/\". Use an allow list of allowable file extensions.  Warning: if you attempt to cleanse your data, then do so that the end result is not in the form that can be dangerous. A sanitizing mechanism can remove characters such as '.' and ';' which may be required for some exploits. An attacker can try to fool the sanitizing mechanism into \"cleaning\" data into a dangerous form. Suppose the attacker injects a '.' inside a filename (e.g. \"sensi.tiveFile\") and the sanitizing mechanism removes the character resulting in the valid filename, \"sensitiveFile\". If the input data are now assumed to be safe, then the file may be compromised.   Inputs should be decoded and <a href=\"https:\/\/www.google.com\/search?q=canonicalized\" target=\"blank\">canonicalized<\/a> to the application's current internal representation before being validated. Make sure that your application does not decode the same input twice. Such errors could be used to bypass allow list schemes by introducing dangerous inputs after they have been checked.  Use a built-in path canonicalization function (such as <a href=\"https:\/\/www.google.com\/search?q=realpath()\" target=\"blank\">realpath()<\/a> in C) that produces the canonical version of the pathname, which effectively removes \"..\" sequences and symbolic links.  Run your code using the lowest privileges that are required to accomplish the necessary tasks. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.  When the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs.  Run your code in a \"jail\" or similar <a href=\"https:\/\/www.google.com\/search?q=sandbox environment\" target=\"blank\">sandbox environment<\/a> that enforces strict boundaries between the process and the operating system. This may effectively restrict which files can be accessed in a particular directory or which commands can be executed by your software.  OS-level examples include the <a href=\"https:\/\/www.google.com\/search?q=Unix chroot jail\" target=\"blank\">Unix chroot jail<\/a>, <a href=\"https:\/\/www.google.com\/search?q=AppArmor\" target=\"blank\">AppArmor<\/a>, and <a href=\"https:\/\/www.google.com\/search?q=SELinux\" target=\"blank\">SELinux<\/a>. In general, managed code may provide some protection. For example, <a href=\"https:\/\/www.google.com\/search?q=java.io.FilePermission\" target=\"blank\">java.io.FilePermission<\/a> in the <a href=\"https:\/\/www.google.com\/search?q=Java SecurityManager\" target=\"blank\">Java SecurityManager<\/a> allows you to specify restrictions on file operations.  This may not be a feasible solution, and it only limits the impact to the operating system; the rest of your application may still be subject to compromise.","alertReferences":["https:\/\/owasp.org\/www-community\/attacks\/Path_Traversal","https:\/\/cwe.mitre.org\/data\/definitions\/22.html"],"alertTechTargeted":"All","alertCWEID":"22","alertID":"6-5","alertWASCID":"33","alertRisk":"High","alertSummary":"The Path Traversal attack technique allows an attacker access to files, directories, and commands that potentially reside outside the web <a href=\"https:\/\/www.google.com\/search?q=document root\" target=\"blank\">document root<\/a> directory. An attacker may manipulate a URL in such a way that the web site will execute or reveal the contents of arbitrary files anywhere on the web server. Any device that exposes an HTTP-based interface is potentially vulnerable to Path Traversal."},"99":{"alertType":"Passive","alertOtherInfo":"N\/A","alertName":"Hash Disclosure - MD4 \/ MD5","alertSolution":"Ensure that <a href=\"https:\/\/www.google.com\/search?q=hashes cyber\" target=\"blank\">hashes<\/a> that are used to protect credentials or other resources are not leaked by the web server or database. There is typically no requirement for password hashes to be accessible to the web browser.","alertReferences":["https:\/\/openwall.info\/wiki\/john\/sample-hashes"],"alertTechTargeted":"All","alertCWEID":"200","alertID":"10097","alertWASCID":"13","alertRisk":"Low","alertSummary":"A <a href=\"https:\/\/www.google.com\/search?q=hash cyber\" target=\"blank\">hash<\/a> was disclosed by the web server. - <a href=\"https:\/\/www.google.com\/search?q=MD4\" target=\"blank\">MD4<\/a> \/ <a href=\"https:\/\/www.google.com\/search?q=MD5\" target=\"blank\">MD5<\/a>"},"12":{"alertType":"Active","alertOtherInfo":"N\/A","alertName":"Remote File Inclusion","alertSolution":"Phase: Architecture and Design When the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs. For example, ID 1 could map to \"inbox.txt\" and ID 2 could map to \"profile.txt\". Features such as the <a href=\"https:\/\/www.google.com\/search?q=ESAPI AccessReferenceMap\" target=\"blank\">ESAPI AccessReferenceMap<\/a> provide this capability.  Phases: Architecture and Design; Operation Run your code in a \"jail\" or similar <a href=\"https:\/\/www.google.com\/search?q=sandbox environment\" target=\"blank\">sandbox environment<\/a> that enforces strict boundaries between the process and the operating system. This may effectively restrict which files can be accessed in a particular directory or which commands can be executed by your software. OS-level examples include the <a href=\"https:\/\/www.google.com\/search?q=Unix chroot jail\" target=\"blank\">Unix chroot jail<\/a>, <a href=\"https:\/\/www.google.com\/search?q=AppArmor\" target=\"blank\">AppArmor<\/a>, and <a href=\"https:\/\/www.google.com\/search?q=SELinux\" target=\"blank\">SELinux<\/a>. In general, managed code may provide some protection. For example, <a href=\"https:\/\/www.google.com\/search?q=java.io.FilePermission\" target=\"blank\">java.io.FilePermission<\/a> in the <a href=\"https:\/\/www.google.com\/search?q=Java SecurityManager\" target=\"blank\">Java SecurityManager<\/a> allows you to specify restrictions on file operations. This may not be a feasible solution, and it only limits the impact to the operating system; the rest of your application may still be subject to compromise. Be careful to avoid <a href=\"https:\/\/www.google.com\/search?q=CWE-243\" target=\"blank\">CWE-243<\/a> and other weaknesses related to jails. For PHP, the interpreter offers restrictions such as <a href=\"https:\/\/www.google.com\/search?q=open basedir\" target=\"blank\">open basedir<\/a> or safe mode which can make it more difficult for an attacker to escape out of the application. Also consider <a href=\"https:\/\/www.google.com\/search?q=Suhosin\" target=\"blank\">Suhosin<\/a>, a hardened PHP extension, which includes various options that disable some of the more dangerous PHP features.  Phase: Implementation Assume all input is malicious. Use an \"<a href=\"https:\/\/www.google.com\/search?q=accept known good\" target=\"blank\">accept known good<\/a>\" <a href=\"https:\/\/www.google.com\/search?q=input validation\" target=\"blank\">input validation<\/a> strategy, i.e., use an allow list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a deny list). However, deny lists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if you are expecting colors such as \"red\" or \"blue.\" For filenames, use stringent allow lists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses such as <a href=\"https:\/\/www.google.com\/search?q=CWE-23\" target=\"blank\">CWE-23<\/a>, and exclude directory separators such as \"\/\" to avoid <a href=\"https:\/\/www.google.com\/search?q=CWE-36\" target=\"blank\">CWE-36<\/a>. Use an allow list of allowable file extensions, which will help to avoid <a href=\"https:\/\/www.google.com\/search?q=CWE-434\" target=\"blank\">CWE-434<\/a>.  Phases: Architecture and Design; Operation Store library, include, and utility files outside of the web <a href=\"https:\/\/www.google.com\/search?q=document root\" target=\"blank\">document root<\/a>, if possible. Otherwise, store them in a separate directory and use the web server's access control capabilities to prevent attackers from directly requesting them. One common practice is to define a fixed constant in each calling program, then check for the existence of the constant in the library\/include file; if the constant does not exist, then the file was directly requested, and it can exit immediately. This significantly reduces the chance of an attacker being able to bypass any protection mechanisms that are in the base program but not in the include files. It will also reduce your <a href=\"https:\/\/www.google.com\/search?q=attack surface\" target=\"blank\">attack surface<\/a>.  Phases: Architecture and Design; Implementation Understand all the potential areas where untrusted inputs can enter your software: parameters or arguments, cookies, anything read from the network, <a href=\"https:\/\/www.google.com\/search?q=environment variables\" target=\"blank\">environment variables<\/a>, <a href=\"https:\/\/www.google.com\/search?q=reverse DNS lookups\" target=\"blank\">reverse DNS lookups<\/a>, query results, request headers, URL components, e-mail, files, databases, and any external systems that provide data to the application. Remember that such inputs may be obtained indirectly through API calls. Many file inclusion problems occur because the programmer assumed that certain inputs could not be modified, especially for cookies and URL components.","alertReferences":["https:\/\/owasp.org\/www-project-web-security-testing-guide\/v42\/4-Web_Application_Security_Testing\/07-Input_Validation_Testing\/11.2-Testing_for_Remote_File_Inclusion","https:\/\/cwe.mitre.org\/data\/definitions\/98.html"],"alertTechTargeted":"All","alertCWEID":"98","alertID":"7","alertWASCID":"5","alertRisk":"High","alertSummary":"Remote File Include (RFI) is an attack technique used to exploit \"<a href=\"https:\/\/www.google.com\/search?q=dynamic file include\" target=\"blank\">dynamic file include<\/a>\" mechanisms in web applications. When web applications take user input (URL, parameter value, etc.) and pass them into file include commands, the web application might be tricked into including remote files with malicious code."},"13":{"alertType":"Passive","alertOtherInfo":"N\/A","alertName":"Vulnerable JS Library","alertSolution":"Please upgrade to the latest version of <a href=\"https:\/\/www.google.com\/search?q=ExampleLibrary\" target=\"blank\">ExampleLibrary<\/a>.","alertReferences":"N\/A","alertTechTargeted":"All","alertCWEID":"829","alertID":"10003","alertWASCID":"N\/A","alertRisk":"Medium","alertSummary":"The identified library <a href=\"https:\/\/www.google.com\/search?q=ExampleLibrary\" target=\"blank\">ExampleLibrary<\/a>, version x.y.z is vulnerable."},"14":{"alertType":"Passive","alertOtherInfo":"N\/A","alertName":"Cookie No HttpOnly Flag","alertSolution":"Ensure that the <a href=\"https:\/\/www.google.com\/search?q=HttpOnly flag\" target=\"blank\">HttpOnly flag<\/a> is set for all cookies.","alertReferences":["https:\/\/owasp.org\/www-community\/HttpOnly"],"alertTechTargeted":"All","alertCWEID":"1004","alertID":"10010","alertWASCID":"13","alertRisk":"Low","alertSummary":"A cookie has been set without the <a href=\"https:\/\/www.google.com\/search?q=HttpOnly flag\" target=\"blank\">HttpOnly flag<\/a>, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then <a href=\"https:\/\/www.google.com\/search?q=session hijacking\" target=\"blank\">session hijacking<\/a> may be possible."},"15":{"alertType":"Passive","alertOtherInfo":"N\/A","alertName":"Cookie Without Secure Flag","alertSolution":"Whenever a cookie contains sensitive information or is a <a href=\"https:\/\/www.google.com\/search?q=session token\" target=\"blank\">session token<\/a>, then it should always be passed using an encrypted channel. Ensure that the <a href=\"https:\/\/www.google.com\/search?q=secure flag cookies\" target=\"blank\">secure flag<\/a> is set for cookies containing such sensitive information.","alertReferences":["https:\/\/owasp.org\/www-project-web-security-testing-guide\/v41\/4-Web_Application_Security_Testing\/06-Session_Management_Testing\/02-Testing_for_Cookies_Attributes.html"],"alertTechTargeted":"All","alertCWEID":"614","alertID":"10011","alertWASCID":"13","alertRisk":"Low","alertSummary":"A cookie has been set without the <a href=\"https:\/\/www.google.com\/search?q=secure flag cookies\" target=\"blank\">secure flag<\/a>, which means that the cookie can be accessed via unencrypted connections."},"16":{"alertType":"Passive","alertOtherInfo":"N\/A","alertName":"Re-examine Cache-control Directives","alertSolution":"For secure content, ensure the <a href=\"https:\/\/www.google.com\/search?q=cache-control HTTP header\" target=\"blank\">cache-control HTTP header<\/a> is set with \"no-cache, no-store, must-revalidate\". If an asset should be cached consider setting the directives \"public, max-age, immutable\".","alertReferences":["https:\/\/cheatsheetseries.owasp.org\/cheatsheets\/Session_Management_Cheat_Sheet.html#web-content-caching","https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/HTTP\/Headers\/Cache-Control","https:\/\/grayduck.mn\/2021\/09\/13\/cache-control-recommendations\/"],"alertTechTargeted":"All","alertCWEID":"525","alertID":"10015","alertWASCID":"13","alertRisk":"Informational","alertSummary":"The <a href=\"https:\/\/www.google.com\/search?q=cache-control header\" target=\"blank\">cache-control header<\/a> has not been set properly or is missing, allowing the browser and proxies to cache content. For static assets like css, js, or image files this might be intended, however, the resources should be reviewed to ensure that no sensitive content will be cached."},"17":{"alertType":"Passive","alertOtherInfo":"N\/A","alertName":"Cross-Domain JavaScript Source File Inclusion","alertSolution":"Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.","alertReferences":"N\/A","alertTechTargeted":"All","alertCWEID":"829","alertID":"10017","alertWASCID":"15","alertRisk":"Low","alertSummary":"The page includes one or more script files from a third-party domain."},"18":{"alertType":"Passive","alertOtherInfo":"N\/A","alertName":"Content-Type Header Missing","alertSolution":"N\/A","alertReferences":"N\/A","alertTechTargeted":"N\/A","alertCWEID":"N\/A","alertID":"10019","alertWASCID":"N\/A","alertRisk":"N\/A","alertSummary":"See child errors."},"19":{"alertType":"Passive","alertOtherInfo":"N\/A","alertName":"Content-Type Header Missing","alertSolution":"Ensure each page is setting the specific and appropriate <a href=\"https:\/\/www.google.com\/search?q=content-type value\" target=\"blank\">content-type value<\/a> for the content being delivered.","alertReferences":["https:\/\/learn.microsoft.com\/en-us\/previous-versions\/windows\/internet-explorer\/ie-developer\/compatibility\/gg622941(v=vs.85)"],"alertTechTargeted":"All","alertCWEID":"345","alertID":"10019-1","alertWASCID":"12","alertRisk":"Informational","alertSummary":"The <a href=\"https:\/\/www.google.com\/search?q=Content-Type header\" target=\"blank\">Content-Type header<\/a> was either missing or empty."},"120":{"alertType":"Active","alertOtherInfo":"N\/A","alertName":"Server Side Include","alertSolution":"Do not trust client side input and enforce a tight check in the server side. Disable <a href=\"https:\/\/www.google.com\/search?q=server side includes\" target=\"blank\">server side includes<\/a>. Refer to manual to disable Sever Side Include. Use least privilege to run your web server or application server. For <a href=\"https:\/\/www.google.com\/search?q=Apache\" target=\"blank\">Apache<\/a>, disable the following: Options Indexes FollowSymLinks Includes AddType application\/x-httpd-cgi .cgi AddType text\/x-server-parsed-html .html","alertReferences":["https:\/\/httpd.apache.org\/docs\/current\/howto\/ssi.html"],"alertTechTargeted":"OS \/ Linux","alertCWEID":"97","alertID":"40009","alertWASCID":"31","alertRisk":"High","alertSummary":"Certain parameters may cause <a href=\"https:\/\/www.google.com\/search?q=Server Side Include\" target=\"blank\">Server Side Include<\/a> commands to be executed.  This may allow database connection or arbitrary code to be executed."},"0":{"alertType":"Active","alertOtherInfo":"N\/A","alertName":"Directory Browsing","alertSolution":"Disable directory browsing.  If this is required, make sure the listed files does not induce risks.","alertReferences":["https:\/\/httpd.apache.org\/docs\/mod\/core.html#options"],"alertTechTargeted":"All","alertCWEID":"548","alertID":"0","alertWASCID":"48","alertRisk":"Medium","alertSummary":"It is possible to view the directory listing.  Directory listing may reveal hidden scripts, include files, backup <a href=\"https:\/\/www.google.com\/search?q=source files\" target=\"blank\">source files<\/a>, etc. which can be accessed to read sensitive information."},"121":{"alertType":"Active","alertOtherInfo":"N\/A","alertName":"Cross Site Scripting (Reflected)","alertSolution":"Phase: Architecture and Design Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid. Examples of libraries and frameworks that make it easier to generate properly encoded output include <a href=\"https:\/\/www.google.com\/search?q=Microsoft's Anti-XSS library\" target=\"blank\">Microsoft's Anti-XSS library<\/a>, the <a href=\"https:\/\/www.google.com\/search?q=OWASP ESAPI Encoding module\" target=\"blank\">OWASP ESAPI Encoding module<\/a>, and <a href=\"https:\/\/www.google.com\/search?q=Apache Wicket\" target=\"blank\">Apache Wicket<\/a>.  Phases: Implementation; Architecture and Design Understand the context in which your data will be used and the encoding that will be expected. This is especially important when transmitting data between different components, or when generating outputs that can contain multiple encodings at the same time, such as web pages or multi-part mail messages. Study all expected communication protocols and data representations to determine the required encoding strategies. For any data that will be output to another web page, especially any data that was received from external inputs, use the appropriate encoding on all non-alphanumeric characters. Consult the <a href=\"https:\/\/www.google.com\/search?q=XSS Prevention Cheat Sheet\" target=\"blank\">XSS Prevention Cheat Sheet<\/a> for more details on the types of encoding and escaping that are needed.  Phase: Architecture and Design For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid <a href=\"https:\/\/www.google.com\/search?q=CWE-602\" target=\"blank\">CWE-602<\/a>. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.  If available, use structured mechanisms that automatically enforce the separation between data and code. These mechanisms may be able to provide the relevant quoting, encoding, and validation automatically, instead of relying on the developer to provide this capability at every point where output is generated.  Phase: Implementation For every web page that is generated, use and specify a character encoding such as ISO-8859-1 or UTF-8. When an encoding is not specified, the web browser may choose a different encoding by guessing which encoding is actually being used by the web page. This can cause the web browser to treat certain sequences as special, opening up the client to subtle XSS attacks. See <a href=\"https:\/\/www.google.com\/search?q=CWE-116\" target=\"blank\">CWE-116<\/a> for more mitigations related to encoding\/escaping.  To help mitigate XSS attacks against the user's session cookie, set the session cookie to be HttpOnly. In browsers that support the HttpOnly feature (such as more recent versions of Internet Explorer and Firefox), this attribute can prevent the user's session cookie from being accessible to malicious client-side scripts that use document.cookie. This is not a complete solution, since HttpOnly is not supported by all browsers. More importantly, <a href=\"https:\/\/www.google.com\/search?q=XMLHTTPRequest\" target=\"blank\">XMLHTTPRequest<\/a> and other powerful browser technologies provide read access to HTTP headers, including the Set-Cookie header in which the HttpOnly flag is set.  Assume all input is malicious. Use an \"<a href=\"https:\/\/www.google.com\/search?q=accept known good\" target=\"blank\">accept known good<\/a>\" <a href=\"https:\/\/www.google.com\/search?q=input validation\" target=\"blank\">input validation<\/a> strategy, i.e., use an allow list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a deny list). However, deny lists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.  When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if you are expecting colors such as \"red\" or \"blue.\"  Ensure that you perform <a href=\"https:\/\/www.google.com\/search?q=input validation\" target=\"blank\">input validation<\/a> at well-defined interfaces within the application. This will help protect the application even if a component is reused or moved elsewhere.","alertReferences":["https:\/\/owasp.org\/www-community\/attacks\/xss\/","https:\/\/cwe.mitre.org\/data\/definitions\/79.html"],"alertTechTargeted":"All","alertCWEID":"79","alertID":"40012","alertWASCID":"8","alertRisk":"High","alertSummary":"<a href=\"https:\/\/www.google.com\/search?q=Cross-site Scripting\" target=\"blank\">Cross-site Scripting<\/a> (XSS) is an attack technique that involves echoing attacker-supplied code into a user\u2019s browser instance. A browser instance can be a standard web browser client, or a browser object embedded in a software product such as the browser within <a href=\"https:\/\/www.google.com\/search?q=WinAmp\" target=\"blank\">WinAmp<\/a>, an <a href=\"https:\/\/www.google.com\/search?q=RSS reader\" target=\"blank\">RSS reader<\/a>, or an email client. The code itself is usually written in HTML\/JavaScript, but may also extend to VBScript, ActiveX, Java, Flash, or any other browser-supported technology.\nWhen an attacker gets a user\u2019s browser to execute his\/her code, the code will run within the <a href=\"https:\/\/www.google.com\/search?q=security context\" target=\"blank\">security context<\/a> (or zone) of the hosting web site. With this level of privilege, the code has the ability to read, modify and transmit any sensitive data accessible by the browser. A Cross-site Scripted user could have his\/her account hijacked (cookie theft), their browser redirected to another location, or possibly shown fraudulent content delivered by the web site they are visiting. Cross-site Scripting attacks essentially compromise the trust relationship between a user and the web site. Applications utilizing browser object instances which load content from the file system may execute code under the local machine zone allowing for system compromise."},"1":{"alertType":"Passive","alertOtherInfo":"192.168.36.127","alertName":"Private IP Disclosure","alertSolution":"Remove the private IP address from the <a href=\"https:\/\/www.google.com\/search?q=HTTP response\" target=\"blank\">HTTP response<\/a> body.  For comments, use <a href=\"https:\/\/www.google.com\/search?q=JSP\" target=\"blank\">JSP<\/a>\/<a href=\"https:\/\/www.google.com\/search?q=ASP.net\" target=\"blank\">ASP<\/a>\/<a href=\"https:\/\/www.google.com\/search?q=PHP\" target=\"blank\">PHP<\/a> comment instead of HTML\/JavaScript comment which can be seen by client browsers.","alertReferences":["https:\/\/tools.ietf.org\/html\/rfc1918"],"alertTechTargeted":"All","alertCWEID":"200","alertID":"2","alertWASCID":"13","alertRisk":"Low","alertSummary":"A private IP (such as 10.x.x.x, 172.x.x.x, 192.168.x.x) or an <a href=\"https:\/\/www.google.com\/search?q=Amazon EC2 private hostname\" target=\"blank\">Amazon EC2 private hostname<\/a> (for example, ip-10-0-56-78) has been found in the <a href=\"https:\/\/www.google.com\/search?q=HTTP response\" target=\"blank\">HTTP response<\/a> body. This information might be helpful for further attacks targeting internal systems."},"122":{"alertType":"Active","alertOtherInfo":"N\/A","alertName":"Cross Site Scripting (Persistent)","alertSolution":"Phase: Architecture and Design Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid. Examples of libraries and frameworks that make it easier to generate properly encoded output include <a href=\"https:\/\/www.google.com\/search?q=Microsoft's Anti-XSS library\" target=\"blank\">Microsoft's Anti-XSS library<\/a>, the <a href=\"https:\/\/www.google.com\/search?q=OWASP ESAPI Encoding module\" target=\"blank\">OWASP ESAPI Encoding module<\/a>, and <a href=\"https:\/\/www.google.com\/search?q=Apache Wicket\" target=\"blank\">Apache Wicket<\/a>.  Phases: Implementation; Architecture and Design Understand the context in which your data will be used and the encoding that will be expected. This is especially important when transmitting data between different components, or when generating outputs that can contain multiple encodings at the same time, such as web pages or multi-part mail messages. Study all expected communication protocols and data representations to determine the required encoding strategies. For any data that will be output to another web page, especially any data that was received from external inputs, use the appropriate encoding on all non-alphanumeric characters. Consult the <a href=\"https:\/\/www.google.com\/search?q=XSS Prevention Cheat Sheet\" target=\"blank\">XSS Prevention Cheat Sheet<\/a> for more details on the types of encoding and escaping that are needed.  Phase: Architecture and Design For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid <a href=\"https:\/\/www.google.com\/search?q=CWE-602\" target=\"blank\">CWE-602<\/a>. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.  If available, use structured mechanisms that automatically enforce the separation between data and code. These mechanisms may be able to provide the relevant quoting, encoding, and validation automatically, instead of relying on the developer to provide this capability at every point where output is generated.  Phase: Implementation For every web page that is generated, use and specify a character encoding such as ISO-8859-1 or UTF-8. When an encoding is not specified, the web browser may choose a different encoding by guessing which encoding is actually being used by the web page. This can cause the web browser to treat certain sequences as special, opening up the client to subtle XSS attacks. See <a href=\"https:\/\/www.google.com\/search?q=CWE-116\" target=\"blank\">CWE-116<\/a> for more mitigations related to encoding\/escaping.  To help mitigate XSS attacks against the user's session cookie, set the session cookie to be HttpOnly. In browsers that support the HttpOnly feature (such as more recent versions of Internet Explorer and Firefox), this attribute can prevent the user's session cookie from being accessible to malicious client-side scripts that use document.cookie. This is not a complete solution, since HttpOnly is not supported by all browsers. More importantly, <a href=\"https:\/\/www.google.com\/search?q=XMLHTTPRequest\" target=\"blank\">XMLHTTPRequest<\/a> and other powerful browser technologies provide read access to HTTP headers, including the Set-Cookie header in which the HttpOnly flag is set.  Assume all input is malicious. Use an \"<a href=\"https:\/\/www.google.com\/search?q=accept known good\" target=\"blank\">accept known good<\/a>\" <a href=\"https:\/\/www.google.com\/search?q=input validation\" target=\"blank\">input validation<\/a> strategy, i.e., use an allow list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a deny list). However, deny lists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.  When performing <a href=\"https:\/\/www.google.com\/search?q=input validation\" target=\"blank\">input validation<\/a>, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if you are expecting colors such as \"red\" or \"blue.\"  Ensure that you perform input validation at well-defined interfaces within the application. This will help protect the application even if a component is reused or moved elsewhere.","alertReferences":["https:\/\/owasp.org\/www-community\/attacks\/xss\/","https:\/\/cwe.mitre.org\/data\/definitions\/79.html"],"alertTechTargeted":"All","alertCWEID":"79","alertID":"40014","alertWASCID":"8","alertRisk":"High","alertSummary":"<a href=\"https:\/\/www.google.com\/search?q=Cross-site Scripting\" target=\"blank\">Cross-site Scripting<\/a> (XSS) is an attack technique that involves echoing attacker-supplied code into a user\u2019s browser instance. A browser instance can be a standard web browser client, or a browser object embedded in a software product such as the browser within <a href=\"https:\/\/www.google.com\/search?q=WinAmp\" target=\"blank\">WinAmp<\/a>, an <a href=\"https:\/\/www.google.com\/search?q=RSS reader\" target=\"blank\">RSS reader<\/a>, or an email client. The code itself is usually written in HTML\/JavaScript, but may also extend to VBScript, ActiveX, Java, Flash, or any other browser-supported technology.\nWhen an attacker gets a user\u2019s browser to execute his\/her code, the code will run within the <a href=\"https:\/\/www.google.com\/search?q=security context\" target=\"blank\">security context<\/a> (or zone) of the hosting web site. With this level of privilege, the code has the ability to read, modify and transmit any sensitive data accessible by the browser. A Cross-site Scripted user could have his\/her account hijacked (cookie theft), their browser redirected to another location, or possibly shown fraudulent content delivered by the web site they are visiting. Cross-site Scripting attacks essentially compromise the trust relationship between a user and the web site. Applications utilizing browser object instances which load content from the file system may execute code under the local machine zone allowing for system compromise."},"2":{"alertType":"Passive","alertOtherInfo":"N\/A","alertName":"Session ID in URL Rewrite","alertSolution":"N\/A","alertReferences":"N\/A","alertTechTargeted":"N\/A","alertCWEID":"N\/A","alertID":"3","alertWASCID":"N\/A","alertRisk":"N\/A","alertSummary":"See child errors."},"123":{"alertType":"Active","alertName":"Cross Site Scripting (Persistent) - Prime","alertTechTargeted":"All","alertCWEID":"79","alertID":"40016","alertWASCID":"8","alertRisk":"Informational"},"3":{"alertType":"Passive","alertOtherInfo":"N\/A","alertName":"Session ID in URL Rewrite","alertSolution":"For secure content, put session ID in a cookie. To be even more secure consider using a combination of cookie and <a href=\"https:\/\/www.google.com\/search?q=URL rewrite\" target=\"blank\">URL rewrite<\/a>.","alertReferences":["https:\/\/seclists.org\/webappsec\/2002\/q4\/111"],"alertTechTargeted":"All","alertCWEID":"200","alertID":"3-1","alertWASCID":"13","alertRisk":"Medium","alertSummary":"URL rewrite is used to track user session ID. The session ID may be disclosed via cross-site <a href=\"https:\/\/www.google.com\/search?q=referer header\" target=\"blank\">referer header<\/a>. In addition, the session ID might be stored in browser history or server logs."},"124":{"alertType":"Active","alertName":"Cross Site Scripting (Persistent) - Spider","alertTechTargeted":"All","alertCWEID":"79","alertID":"40017","alertWASCID":"8","alertRisk":"Informational"},"4":{"alertType":"Passive","alertOtherInfo":"N\/A","alertName":"Session ID in URL Rewrite","alertSolution":"For secure content, put session ID in a cookie. To be even more secure consider using a combination of cookie and URL rewrite.","alertReferences":["https:\/\/seclists.org\/webappsec\/2002\/q4\/111"],"alertTechTargeted":"All","alertCWEID":"200","alertID":"3-2","alertWASCID":"13","alertRisk":"Medium","alertSummary":"<a href=\"https:\/\/www.google.com\/search?q=URL rewrite\" target=\"blank\">URL rewrite<\/a> is used to track user session ID. The session ID may be disclosed via cross-site <a href=\"https:\/\/www.google.com\/search?q=referer header\" target=\"blank\">referer header<\/a>. In addition, the session ID might be stored in browser history or server logs."},"125":{"alertType":"Active","alertOtherInfo":"N\/A","alertName":"SQL Injection","alertSolution":"Do not trust client side input, even if there is client side validation in place. In general, type check all data on the server side. If the application uses <a href=\"https:\/\/www.google.com\/search?q=JDBC\" target=\"blank\">JDBC<\/a>, use PreparedStatement or CallableStatement, with parameters passed by '?' If the application uses <a href=\"https:\/\/www.google.com\/search?q=ASP.net\" target=\"blank\">ASP<\/a>, use ADO Command Objects with strong type checking and parameterized queries. If <a href=\"https:\/\/www.google.com\/search?q=database Stored Procedures\" target=\"blank\">database Stored Procedures<\/a> can be used, use them. Do *not* concatenate strings into queries in the stored procedure, or use 'exec', 'exec immediate', or equivalent functionality! Do not create dynamic SQL queries using simple string concatenation. Escape all data received from the client. Apply an 'allow list' of allowed characters, or a 'deny list' of disallowed characters in user input. Apply the <a href=\"https:\/\/www.google.com\/search?q=principle of least privilege\" target=\"blank\">principle of least privilege<\/a> by using the least privileged database user possible. In particular, avoid using the 'sa' or 'db-owner' database users. This does not eliminate <a href=\"https:\/\/www.google.com\/search?q=SQL injection\" target=\"blank\">SQL injection<\/a>, but minimizes its impact. Grant the minimum database access that is necessary for the application.","alertReferences":["https:\/\/cheatsheetseries.owasp.org\/cheatsheets\/SQL_Injection_Prevention_Cheat_Sheet.html"],"alertTechTargeted":"Db \/ Firebird","alertCWEID":"89","alertID":"40018","alertWASCID":"19","alertRisk":"High","alertSummary":"SQL injection may be possible."},"5":{"alertType":"Passive","alertOtherInfo":"N\/A","alertName":"Referer Exposes Session ID","alertSolution":"This is a risk if the session ID is sensitive and the hyperlink refers to an external or third party host. For secure content, put session ID in secured session cookie.","alertReferences":["https:\/\/seclists.org\/webappsec\/2002\/q4\/111"],"alertTechTargeted":"All","alertCWEID":"200","alertID":"3-3","alertWASCID":"13","alertRisk":"Medium","alertSummary":"A hyperlink pointing to another host name was found. As session ID URL rewrite is used, it may be disclosed in <a href=\"https:\/\/www.google.com\/search?q=referer header\" target=\"blank\">referer header<\/a> to external hosts."},"126":{"alertType":"Active","alertOtherInfo":"N\/A","alertName":"SQL Injection - MySQL","alertSolution":"Do not trust client side input, even if there is client side validation in place. In general, type check all data on the server side. If the application uses <a href=\"https:\/\/www.google.com\/search?q=JDBC\" target=\"blank\">JDBC<\/a>, use PreparedStatement or CallableStatement, with parameters passed by '?' If the application uses <a href=\"https:\/\/www.google.com\/search?q=ASP.net\" target=\"blank\">ASP<\/a>, use ADO Command Objects with strong type checking and parameterized queries. If <a href=\"https:\/\/www.google.com\/search?q=database Stored Procedures\" target=\"blank\">database Stored Procedures<\/a> can be used, use them. Do *not* concatenate strings into queries in the stored procedure, or use 'exec', 'exec immediate', or equivalent functionality! Do not create dynamic SQL queries using simple string concatenation. Escape all data received from the client. Apply an 'allow list' of allowed characters, or a 'deny list' of disallowed characters in user input. Apply the <a href=\"https:\/\/www.google.com\/search?q=principle of least privilege\" target=\"blank\">principle of least privilege<\/a> by using the least privileged database user possible. In particular, avoid using the 'sa' or 'db-owner' database users. This does not eliminate <a href=\"https:\/\/www.google.com\/search?q=SQL injection\" target=\"blank\">SQL injection<\/a>, but minimizes its impact. Grant the minimum database access that is necessary for the application.","alertReferences":["https:\/\/cheatsheetseries.owasp.org\/cheatsheets\/SQL_Injection_Prevention_Cheat_Sheet.html"],"alertTechTargeted":"Db \/ MySQL","alertCWEID":"89","alertID":"40019","alertWASCID":"19","alertRisk":"High","alertSummary":"<a href=\"https:\/\/www.google.com\/search?q=SQL injection\" target=\"blank\">SQL injection<\/a> may be possible."},"6":{"alertType":"Active","alertOtherInfo":"N\/A","alertName":"Path Traversal","alertSolution":"N\/A","alertReferences":"N\/A","alertTechTargeted":"N\/A","alertCWEID":"N\/A","alertID":"6","alertWASCID":"N\/A","alertRisk":"N\/A","alertSummary":"See child errors."},"127":{"alertType":"Active","alertOtherInfo":"N\/A","alertName":"SQL Injection - Hypersonic SQL","alertSolution":"Do not trust client side input, even if there is client side validation in place. In general, type check all data on the server side. If the application uses <a href=\"https:\/\/www.google.com\/search?q=JDBC\" target=\"blank\">JDBC<\/a>, use PreparedStatement or CallableStatement, with parameters passed by '?' If the application uses <a href=\"https:\/\/www.google.com\/search?q=ASP.net\" target=\"blank\">ASP<\/a>, use ADO Command Objects with strong type checking and parameterized queries. If <a href=\"https:\/\/www.google.com\/search?q=database Stored Procedures\" target=\"blank\">database Stored Procedures<\/a> can be used, use them. Do *not* concatenate strings into queries in the stored procedure, or use 'exec', 'exec immediate', or equivalent functionality! Do not create dynamic SQL queries using simple string concatenation. Escape all data received from the client. Apply an 'allow list' of allowed characters, or a 'deny list' of disallowed characters in user input. Apply the <a href=\"https:\/\/www.google.com\/search?q=principle of least privilege\" target=\"blank\">principle of least privilege<\/a> by using the least privileged database user possible. In particular, avoid using the 'sa' or 'db-owner' database users. This does not eliminate <a href=\"https:\/\/www.google.com\/search?q=SQL injection\" target=\"blank\">SQL injection<\/a>, but minimizes its impact. Grant the minimum database access that is necessary for the application.","alertReferences":["https:\/\/cheatsheetseries.owasp.org\/cheatsheets\/SQL_Injection_Prevention_Cheat_Sheet.html"],"alertTechTargeted":"Db \/ HypersonicSQL","alertCWEID":"89","alertID":"40020","alertWASCID":"19","alertRisk":"High","alertSummary":"<a href=\"https:\/\/www.google.com\/search?q=SQL injection\" target=\"blank\">SQL injection<\/a> may be possible."},"7":{"alertType":"Active","alertOtherInfo":"N\/A","alertName":"Path Traversal","alertSolution":"Assume all input is malicious. Use an \"<a href=\"https:\/\/www.google.com\/search?q=accept known good\" target=\"blank\">accept known good<\/a>\" <a href=\"https:\/\/www.google.com\/search?q=input validation\" target=\"blank\">input validation<\/a> strategy, i.e., use an allow list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a deny list). However, deny lists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.  When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if you are expecting colors such as \"red\" or \"blue.\"  For filenames, use stringent allow lists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses, and exclude directory separators such as \"\/\". Use an allow list of allowable file extensions.  Warning: if you attempt to cleanse your data, then do so that the end result is not in the form that can be dangerous. A sanitizing mechanism can remove characters such as '.' and ';' which may be required for some exploits. An attacker can try to fool the sanitizing mechanism into \"cleaning\" data into a dangerous form. Suppose the attacker injects a '.' inside a filename (e.g. \"sensi.tiveFile\") and the sanitizing mechanism removes the character resulting in the valid filename, \"sensitiveFile\". If the input data are now assumed to be safe, then the file may be compromised.   Inputs should be decoded and <a href=\"https:\/\/www.google.com\/search?q=canonicalized\" target=\"blank\">canonicalized<\/a> to the application's current internal representation before being validated. Make sure that your application does not decode the same input twice. Such errors could be used to bypass allow list schemes by introducing dangerous inputs after they have been checked.  Use a built-in path canonicalization function (such as <a href=\"https:\/\/www.google.com\/search?q=realpath()\" target=\"blank\">realpath()<\/a> in C) that produces the canonical version of the pathname, which effectively removes \"..\" sequences and symbolic links.  Run your code using the lowest privileges that are required to accomplish the necessary tasks. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.  When the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs.  Run your code in a \"jail\" or similar <a href=\"https:\/\/www.google.com\/search?q=sandbox environment\" target=\"blank\">sandbox environment<\/a> that enforces strict boundaries between the process and the operating system. This may effectively restrict which files can be accessed in a particular directory or which commands can be executed by your software.  OS-level examples include the <a href=\"https:\/\/www.google.com\/search?q=Unix chroot jail\" target=\"blank\">Unix chroot jail<\/a>, <a href=\"https:\/\/www.google.com\/search?q=AppArmor\" target=\"blank\">AppArmor<\/a>, and <a href=\"https:\/\/www.google.com\/search?q=SELinux.\" target=\"blank\">SELinux.<\/a> In general, managed code may provide some protection. For example, <a href=\"https:\/\/www.google.com\/search?q=java.io.FilePermission\" target=\"blank\">java.io.FilePermission<\/a> in the <a href=\"https:\/\/www.google.com\/search?q=Java SecurityManager\" target=\"blank\">Java SecurityManager<\/a> allows you to specify restrictions on file operations.  This may not be a feasible solution, and it only limits the impact to the operating system; the rest of your application may still be subject to compromise.","alertReferences":["https:\/\/owasp.org\/www-community\/attacks\/Path_Traversal","https:\/\/cwe.mitre.org\/data\/definitions\/22.html"],"alertTechTargeted":"All","alertCWEID":"22","alertID":"6-1","alertWASCID":"33","alertRisk":"High","alertSummary":"The Path Traversal attack technique allows an attacker access to files, directories, and commands that potentially reside outside the web <a href=\"https:\/\/www.google.com\/search?q=document root\" target=\"blank\">document root<\/a> directory. An attacker may manipulate a URL in such a way that the web site will execute or reveal the contents of arbitrary files anywhere on the web server. Any device that exposes an HTTP-based interface is potentially vulnerable to Path Traversal."},"128":{"alertType":"Active","alertOtherInfo":"N\/A","alertName":"SQL Injection - Oracle","alertSolution":"Do not trust client side input, even if there is client side validation in place. In general, type check all data on the server side. If the application uses <a href=\"https:\/\/www.google.com\/search?q=JDBC\" target=\"blank\">JDBC<\/a>, use PreparedStatement or CallableStatement, with parameters passed by '?' If the application uses <a href=\"https:\/\/www.google.com\/search?q=ASP.net\" target=\"blank\">ASP<\/a>, use ADO Command Objects with strong type checking and parameterized queries. If <a href=\"https:\/\/www.google.com\/search?q=database Stored Procedures\" target=\"blank\">database Stored Procedures<\/a> can be used, use them. Do *not* concatenate strings into queries in the stored procedure, or use 'exec', 'exec immediate', or equivalent functionality! Do not create dynamic SQL queries using simple string concatenation. Escape all data received from the client. Apply an 'allow list' of allowed characters, or a 'deny list' of disallowed characters in user input. Apply the <a href=\"https:\/\/www.google.com\/search?q=principle of least privilege\" target=\"blank\">principle of least privilege<\/a> by using the least privileged database user possible. In particular, avoid using the 'sa' or 'db-owner' database users. This does not eliminate <a href=\"https:\/\/www.google.com\/search?q=SQL injection\" target=\"blank\">SQL injection<\/a>, but minimizes its impact. Grant the minimum database access that is necessary for the application.","alertReferences":["https:\/\/cheatsheetseries.owasp.org\/cheatsheets\/SQL_Injection_Prevention_Cheat_Sheet.html"],"alertTechTargeted":"Db \/ Oracle","alertCWEID":"89","alertID":"40021","alertWASCID":"19","alertRisk":"High","alertSummary":"<a href=\"https:\/\/www.google.com\/search?q=SQL injection\" target=\"blank\">SQL injection<\/a> may be possible."},"8":{"alertType":"Active","alertOtherInfo":"N\/A","alertName":"Path Traversal","alertSolution":"Assume all input is malicious. Use an \"<a href=\"https:\/\/www.google.com\/search?q=accept known good\" target=\"blank\">accept known good<\/a>\" <a href=\"https:\/\/www.google.com\/search?q=input validation\" target=\"blank\">input validation<\/a> strategy, i.e., use an allow list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a deny list). However, deny lists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.  When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if you are expecting colors such as \"red\" or \"blue.\"  For filenames, use stringent allow lists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses, and exclude directory separators such as \"\/\". Use an allow list of allowable file extensions.  Warning: if you attempt to cleanse your data, then do so that the end result is not in the form that can be dangerous. A sanitizing mechanism can remove characters such as '.' and ';' which may be required for some exploits. An attacker can try to fool the sanitizing mechanism into \"cleaning\" data into a dangerous form. Suppose the attacker injects a '.' inside a filename (e.g. \"sensi.tiveFile\") and the sanitizing mechanism removes the character resulting in the valid filename, \"sensitiveFile\". If the input data are now assumed to be safe, then the file may be compromised.   Inputs should be decoded and <a href=\"https:\/\/www.google.com\/search?q=canonicalized\" target=\"blank\">canonicalized<\/a> to the application's current internal representation before being validated. Make sure that your application does not decode the same input twice. Such errors could be used to bypass allow list schemes by introducing dangerous inputs after they have been checked.  Use a built-in path canonicalization function (such as <a href=\"https:\/\/www.google.com\/search?q=realpath()\" target=\"blank\">realpath()<\/a> in C) that produces the canonical version of the pathname, which effectively removes \"..\" sequences and symbolic links.  Run your code using the lowest privileges that are required to accomplish the necessary tasks. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.  When the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs.  Run your code in a \"jail\" or similar <a href=\"https:\/\/www.google.com\/search?q=sandbox environment\" target=\"blank\">sandbox environment<\/a> that enforces strict boundaries between the process and the operating system. This may effectively restrict which files can be accessed in a particular directory or which commands can be executed by your software.  OS-level examples include the <a href=\"https:\/\/www.google.com\/search?q=Unix chroot jail\" target=\"blank\">Unix chroot jail<\/a>, <a href=\"https:\/\/www.google.com\/search?q=AppArmor\" target=\"blank\">AppArmor<\/a>, and <a href=\"https:\/\/www.google.com\/search?q=SELinux\" target=\"blank\">SELinux<\/a>. In general, managed code may provide some protection. For example, <a href=\"https:\/\/www.google.com\/search?q=java.io.FilePermission\" target=\"blank\">java.io.FilePermission<\/a> in the <a href=\"https:\/\/www.google.com\/search?q=Java SecurityManager\" target=\"blank\">Java SecurityManager<\/a> allows you to specify restrictions on file operations.  This may not be a feasible solution, and it only limits the impact to the operating system; the rest of your application may still be subject to compromise.","alertReferences":["https:\/\/owasp.org\/www-community\/attacks\/Path_Traversal","https:\/\/cwe.mitre.org\/data\/definitions\/22.html"],"alertTechTargeted":"All","alertCWEID":"22","alertID":"6-2","alertWASCID":"33","alertRisk":"High","alertSummary":"The Path Traversal attack technique allows an attacker access to files, directories, and commands that potentially reside outside the web <a href=\"https:\/\/www.google.com\/search?q=document root\" target=\"blank\">document root<\/a> directory. An attacker may manipulate a URL in such a way that the web site will execute or reveal the contents of arbitrary files anywhere on the web server. Any device that exposes an HTTP-based interface is potentially vulnerable to Path Traversal."},"129":{"alertType":"Active","alertOtherInfo":"N\/A","alertName":"SQL Injection - PostgreSQL","alertSolution":"Do not trust client side input, even if there is client side validation in place. In general, type check all data on the server side. If the application uses <a href=\"https:\/\/www.google.com\/search?q=JDBC\" target=\"blank\">JDBC<\/a>, use PreparedStatement or CallableStatement, with parameters passed by '?' If the application uses <a href=\"https:\/\/www.google.com\/search?q=ASP.net\" target=\"blank\">ASP<\/a>, use ADO Command Objects with strong type checking and parameterized queries. If <a href=\"https:\/\/www.google.com\/search?q=database Stored Procedures\" target=\"blank\">database Stored Procedures<\/a> can be used, use them. Do *not* concatenate strings into queries in the stored procedure, or use 'exec', 'exec immediate', or equivalent functionality! Do not create dynamic SQL queries using simple string concatenation. Escape all data received from the client. Apply an 'allow list' of allowed characters, or a 'deny list' of disallowed characters in user input. Apply the <a href=\"https:\/\/www.google.com\/search?q=principle of least privilege\" target=\"blank\">principle of least privilege<\/a> by using the least privileged database user possible. In particular, avoid using the 'sa' or 'db-owner' database users. This does not eliminate <a href=\"https:\/\/www.google.com\/search?q=SQL injection\" target=\"blank\">SQL injection<\/a>, but minimizes its impact. Grant the minimum database access that is necessary for the application.","alertReferences":["https:\/\/cheatsheetseries.owasp.org\/cheatsheets\/SQL_Injection_Prevention_Cheat_Sheet.html"],"alertTechTargeted":"Db \/ PostgreSQL","alertCWEID":"89","alertID":"40022","alertWASCID":"19","alertRisk":"High","alertSummary":"<a href=\"https:\/\/www.google.com\/search?q=SQL injection\" target=\"blank\">SQL injection<\/a> may be possible."},"9":{"alertType":"Active","alertOtherInfo":"N\/A","alertName":"Path Traversal","alertSolution":"Assume all input is malicious. Use an \"<a href=\"https:\/\/www.google.com\/search?q=accept known good\" target=\"blank\">accept known good<\/a>\" <a href=\"https:\/\/www.google.com\/search?q=input validation\" target=\"blank\">input validation<\/a> strategy, i.e., use an allow list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a deny list). However, deny lists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.  When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if you are expecting colors such as \"red\" or \"blue.\"  For filenames, use stringent allow lists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses, and exclude directory separators such as \"\/\". Use an allow list of allowable file extensions.  Warning: if you attempt to cleanse your data, then do so that the end result is not in the form that can be dangerous. A sanitizing mechanism can remove characters such as '.' and ';' which may be required for some exploits. An attacker can try to fool the sanitizing mechanism into \"cleaning\" data into a dangerous form. Suppose the attacker injects a '.' inside a filename (e.g. \"sensi.tiveFile\") and the sanitizing mechanism removes the character resulting in the valid filename, \"sensitiveFile\". If the input data are now assumed to be safe, then the file may be compromised.   Inputs should be decoded and <a href=\"https:\/\/www.google.com\/search?q=canonicalized\" target=\"blank\">canonicalized<\/a> to the application's current internal representation before being validated. Make sure that your application does not decode the same input twice. Such errors could be used to bypass allow list schemes by introducing dangerous inputs after they have been checked.  Use a built-in path canonicalization function (such as <a href=\"https:\/\/www.google.com\/search?q=realpath()\" target=\"blank\">realpath()<\/a> in C) that produces the canonical version of the pathname, which effectively removes \"..\" sequences and symbolic links.  Run your code using the lowest privileges that are required to accomplish the necessary tasks. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.  When the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs.  Run your code in a \"jail\" or similar <a href=\"https:\/\/www.google.com\/search?q=sandbox environment\" target=\"blank\">sandbox environment<\/a> that enforces strict boundaries between the process and the operating system. This may effectively restrict which files can be accessed in a particular directory or which commands can be executed by your software.  OS-level examples include the <a href=\"https:\/\/www.google.com\/search?q=Unix chroot jail\" target=\"blank\">Unix chroot jail<\/a>, <a href=\"https:\/\/www.google.com\/search?q=AppArmor\" target=\"blank\">AppArmor<\/a>, and <a href=\"https:\/\/www.google.com\/search?q=SELinux\" target=\"blank\">SELinux<\/a>. In general, managed code may provide some protection. For example, <a href=\"https:\/\/www.google.com\/search?q=java.io.FilePermission\" target=\"blank\">java.io.FilePermission<\/a> in the <a href=\"https:\/\/www.google.com\/search?q=Java SecurityManager\" target=\"blank\">Java SecurityManager<\/a> allows you to specify restrictions on file operations.  This may not be a feasible solution, and it only limits the impact to the operating system; the rest of your application may still be subject to compromise.","alertReferences":["https:\/\/owasp.org\/www-community\/attacks\/Path_Traversal","https:\/\/cwe.mitre.org\/data\/definitions\/22.html"],"alertTechTargeted":"All","alertCWEID":"22","alertID":"6-3","alertWASCID":"33","alertRisk":"High","alertSummary":"The Path Traversal attack technique allows an attacker access to files, directories, and commands that potentially reside outside the web <a href=\"https:\/\/www.google.com\/search?q=document root\" target=\"blank\">document root<\/a> directory. An attacker may manipulate a URL in such a way that the web site will execute or reveal the contents of arbitrary files anywhere on the web server. Any device that exposes an HTTP-based interface is potentially vulnerable to Path Traversal."},"20":{"alertType":"Passive","alertOtherInfo":"N\/A","alertName":"Content-Type Header Empty","alertSolution":"Ensure each page is setting the specific and appropriate <a href=\"https:\/\/www.google.com\/search?q=content-type value\" target=\"blank\">content-type value<\/a> for the content being delivered.","alertReferences":["https:\/\/learn.microsoft.com\/en-us\/previous-versions\/windows\/internet-explorer\/ie-developer\/compatibility\/gg622941(v=vs.85)"],"alertTechTargeted":"All","alertCWEID":"345","alertID":"10019-2","alertWASCID":"12","alertRisk":"Informational","alertSummary":"The <a href=\"https:\/\/www.google.com\/search?q=Content-Type header\" target=\"blank\">Content-Type header<\/a> was either missing or empty."},"21":{"alertType":"Passive","alertOtherInfo":"N\/A","alertName":"Anti-clickjacking Header","alertSolution":"N\/A","alertReferences":"N\/A","alertTechTargeted":"N\/A","alertCWEID":"N\/A","alertID":"10020","alertWASCID":"N\/A","alertRisk":"N\/A","alertSummary":"See child errors."},"22":{"alertType":"Passive","alertOtherInfo":"N\/A","alertName":"Missing Anti-clickjacking Header","alertSolution":"Modern Web browsers support the <a href=\"https:\/\/www.google.com\/search?q=Content-Security-Policy\" target=\"blank\">Content-Security-Policy<\/a> and <a href=\"https:\/\/www.google.com\/search?q=X-Frame-Options\" target=\"blank\">X-Frame-Options<\/a> HTTP headers. Ensure one of them is set on all web pages returned by your site\/app. If you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's <a href=\"https:\/\/www.google.com\/search?q=frame-ancestors\" target=\"blank\">\"frame-ancestors\" directive<\/a>.","alertReferences":["https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/HTTP\/Headers\/X-Frame-Options"],"alertTechTargeted":"All","alertCWEID":"1021","alertID":"10020-1","alertWASCID":"15","alertRisk":"Medium","alertSummary":"The response does not include either <a href=\"https:\/\/www.google.com\/search?q=Content-Security-Policy\" target=\"blank\">Content-Security-Policy<\/a> with \u2018frame-ancestors\u2019 directive or <a href=\"https:\/\/www.google.com\/search?q=X-Frame-Options\" target=\"blank\">X-Frame-Options<\/a> to protect against \u2018<a href=\"https:\/\/www.google.com\/search?q=ClickJacking\" target=\"blank\">ClickJacking<\/a>' attacks."},"23":{"alertType":"Passive","alertOtherInfo":"N\/A","alertName":"Multiple X-Frame-Options Header Entries","alertSolution":"Ensure only a single <a href=\"https:\/\/www.google.com\/search?q=X-Frame-Options\" target=\"blank\">X-Frame-Options<\/a> header is present in the response.","alertReferences":["https:\/\/tools.ietf.org\/html\/rfc7034"],"alertTechTargeted":"All","alertCWEID":"1021","alertID":"10020-2","alertWASCID":"15","alertRisk":"Medium","alertSummary":"<a href=\"https:\/\/www.google.com\/search?q=X-Frame-Options\" target=\"blank\">X-Frame-Options<\/a> (XFO) headers were found, a response with multiple XFO header entries may not be predictably treated by all user-agents."},"24":{"alertType":"Passive","alertOtherInfo":"N\/A","alertName":"X-Frame-Options Defined via META (Non-compliant with Spec)","alertSolution":"Ensure <a href=\"https:\/\/www.google.com\/search?q=X-Frame-Options\" target=\"blank\">X-Frame-Options<\/a> is set via a response header field.  Alternatively consider implementing <a href=\"https:\/\/www.google.com\/search?q=Content Security Policy\" target=\"blank\">Content Security Policy<\/a>'s \"frame-ancestors\" directive.","alertReferences":["https:\/\/tools.ietf.org\/html\/rfc7034#section-4"],"alertTechTargeted":"All","alertCWEID":"1021","alertID":"10020-3","alertWASCID":"15","alertRisk":"Medium","alertSummary":"An <a href=\"https:\/\/www.google.com\/search?q=X-Frame-Options\" target=\"blank\">X-Frame-Options<\/a> (XFO) META tag was found, defining XFO via a META tag is explicitly not supported by the spec (RFC 7034)."},"25":{"alertType":"Passive","alertOtherInfo":"N\/A","alertName":"X-Frame-Options Setting Malformed","alertSolution":"Ensure a valid setting is used on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY.  Alternatively consider implementing <a href=\"https:\/\/www.google.com\/search?q=Content Security Policy\" target=\"blank\">Content Security Policy<\/a>'s \"frame-ancestors\" directive.","alertReferences":["https:\/\/tools.ietf.org\/html\/rfc7034#section-2.1"],"alertTechTargeted":"All","alertCWEID":"1021","alertID":"10020-4","alertWASCID":"15","alertRisk":"Medium","alertSummary":"An <a href=\"https:\/\/www.google.com\/search?q=X-Frame-Options\" target=\"blank\">X-Frame-Options<\/a> header was present in the response but the value was not correctly set."},"26":{"alertType":"Passive","alertOtherInfo":"This issue still applies to <a href=\"https:\/\/www.google.com\/search?q=error type pages\" target=\"blank\">error type pages<\/a> (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for <a href=\"https:\/\/www.google.com\/search?q=browsers sniffing\" target=\"blank\">browsers sniffing<\/a> pages away from their actual content type. At \"High\" threshold this scan rule will not alert on client or server error responses.","alertName":"X-Content-Type-Options Header Missing","alertSolution":"Ensure that the application\/web server sets the Content-Type header appropriately, and that it sets the <a href=\"https:\/\/www.google.com\/search?q=X-Content-Type-Options\" target=\"blank\">X-Content-Type-Options<\/a> header to 'nosniff' for all web pages. If possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform <a href=\"https:\/\/www.google.com\/search?q=MIME-sniffing\" target=\"blank\">MIME-sniffing<\/a> at all, or that can be directed by the web application\/web server to not perform MIME-sniffing.","alertReferences":["https:\/\/learn.microsoft.com\/en-us\/previous-versions\/windows\/internet-explorer\/ie-developer\/compatibility\/gg622941(v=vs.85)","https:\/\/owasp.org\/www-community\/Security_Headers"],"alertTechTargeted":"All","alertCWEID":"693","alertID":"10021","alertWASCID":"15","alertRisk":"Low","alertSummary":"The <a href=\"https:\/\/www.google.com\/search?q=Anti-MIME-Sniffing\" target=\"blank\">Anti-MIME-Sniffing<\/a> header <a href=\"https:\/\/www.google.com\/search?q=X-Content-Type-Options\" target=\"blank\">X-Content-Type-Options<\/a> was not set to \u2019nosniff\u2019. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing."},"27":{"alertType":"Passive","alertOtherInfo":"N\/A","alertName":"Information Disclosure - Debug Error Messages","alertSolution":"Disable debugging messages before pushing to production.","alertReferences":"N\/A","alertTechTargeted":"All","alertCWEID":"200","alertID":"10023","alertWASCID":"13","alertRisk":"Low","alertSummary":"The response appeared to contain common error messages returned by platforms such as <a href=\"https:\/\/www.google.com\/search?q=ASP.NET\" target=\"blank\">ASP.NET<\/a>, and Web-servers such as <a href=\"https:\/\/www.google.com\/search?q=IIS\" target=\"blank\">IIS<\/a> and <a href=\"https:\/\/www.google.com\/search?q=Apache\" target=\"blank\">Apache<\/a>. You can configure the list of common debug messages."},"28":{"alertType":"Passive","alertOtherInfo":"The URL appears to contain US Social Security Number(s)","alertName":"Information Disclosure - Sensitive Information in URL","alertSolution":"Do not pass sensitive information in URIs.","alertReferences":"N\/A","alertTechTargeted":"All","alertCWEID":"200","alertID":"10024","alertWASCID":"13","alertRisk":"Informational","alertSummary":"The request appeared to contain sensitive information leaked in the URL. This can violate <a href=\"https:\/\/www.google.com\/search?q=PCI\" target=\"blank\">PCI<\/a> and most organizational compliance policies. You can configure the list of strings for this check to add or remove values specific to your environment."},"29":{"alertType":"Passive","alertOtherInfo":"The URL in the HTTP referrer header field appears to contain US Social Security Number(s).","alertName":"Information Disclosure - Sensitive Information in HTTP Referrer Header","alertSolution":"Do not pass sensitive information in URIs.","alertReferences":"N\/A","alertTechTargeted":"All","alertCWEID":"200","alertID":"10025","alertWASCID":"13","alertRisk":"Informational","alertSummary":"The HTTP header may have leaked a potentially sensitive parameter to another domain. This can violate <a href=\"https:\/\/www.google.com\/search?q=PCI\" target=\"blank\">PCI<\/a> and most organizational compliance policies. You can configure the list of strings for this check to add or remove values specific to your environment."},"130":{"alertType":"Active","alertOtherInfo":"N\/A","alertName":"SQL Injection - SQLite","alertSolution":"Do not trust client side input, even if there is client side validation in place. In general, type check all data on the server side. If the application uses <a href=\"https:\/\/www.google.com\/search?q=JDBC\" target=\"blank\">JDBC<\/a>, use PreparedStatement or CallableStatement, with parameters passed by '?' If the application uses <a href=\"https:\/\/www.google.com\/search?q=ASP.net\" target=\"blank\">ASP<\/a>, use ADO Command Objects with strong type checking and parameterized queries. If <a href=\"https:\/\/www.google.com\/search?q=database Stored Procedures\" target=\"blank\">database Stored Procedures<\/a> can be used, use them. Do *not* concatenate strings into queries in the stored procedure, or use 'exec', 'exec immediate', or equivalent functionality! Do not create dynamic SQL queries using simple string concatenation. Escape all data received from the client. Apply an 'allow list' of allowed characters, or a 'deny list' of disallowed characters in user input. Apply the <a href=\"https:\/\/www.google.com\/search?q=principle of least privilege\" target=\"blank\">principle of least privilege<\/a> by using the least privileged database user possible. In particular, avoid using the 'sa' or 'db-owner' database users. This does not eliminate <a href=\"https:\/\/www.google.com\/search?q=SQL injection\" target=\"blank\">SQL injection<\/a>, but minimizes its impact. Grant the minimum database access that is necessary for the application.","alertReferences":["https:\/\/cheatsheetseries.owasp.org\/cheatsheets\/SQL_Injection_Prevention_Cheat_Sheet.html"],"alertTechTargeted":"Db \/ SQLite","alertCWEID":"89","alertID":"40024","alertWASCID":"19","alertRisk":"High","alertSummary":"<a href=\"https:\/\/www.google.com\/search?q=SQL injection\" target=\"blank\">SQL injection<\/a> may be possible."},"131":{"alertType":"Active","alertOtherInfo":"N\/A","alertName":"Cross Site Scripting (DOM Based)","alertSolution":"Phase: Architecture and Design Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid. Examples of libraries and frameworks that make it easier to generate properly encoded output include <a href=\"https:\/\/www.google.com\/search?q=Microsoft's Anti-XSS library\" target=\"blank\">Microsoft's Anti-XSS library<\/a>, the <a href=\"https:\/\/www.google.com\/search?q=OWASP ESAPI Encoding module\" target=\"blank\">OWASP ESAPI Encoding module<\/a>, and <a href=\"https:\/\/www.google.com\/search?q=Apache Wicket\" target=\"blank\">Apache Wicket<\/a>.  Phases: Implementation; Architecture and Design Understand the context in which your data will be used and the encoding that will be expected. This is especially important when transmitting data between different components, or when generating outputs that can contain multiple encodings at the same time, such as web pages or multi-part mail messages. Study all expected communication protocols and data representations to determine the required encoding strategies. For any data that will be output to another web page, especially any data that was received from external inputs, use the appropriate encoding on all non-alphanumeric characters. Consult the <a href=\"https:\/\/www.google.com\/search?q=XSS Prevention Cheat Sheet\" target=\"blank\">XSS Prevention Cheat Sheet<\/a> for more details on the types of encoding and escaping that are needed.  Phase: Architecture and Design For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid <a href=\"https:\/\/www.google.com\/search?q=CWE-602\" target=\"blank\">CWE-602<\/a>. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.  If available, use structured mechanisms that automatically enforce the separation between data and code. These mechanisms may be able to provide the relevant quoting, encoding, and validation automatically, instead of relying on the developer to provide this capability at every point where output is generated.  Phase: Implementation For every web page that is generated, use and specify a character encoding such as ISO-8859-1 or UTF-8. When an encoding is not specified, the web browser may choose a different encoding by guessing which encoding is actually being used by the web page. This can cause the web browser to treat certain sequences as special, opening up the client to subtle XSS attacks. See <a href=\"https:\/\/www.google.com\/search?q=CWE-116\" target=\"blank\">CWE-116<\/a> for more mitigations related to encoding\/escaping.  To help mitigate XSS attacks against the user's session cookie, set the session cookie to be HttpOnly. In browsers that support the HttpOnly feature (such as more recent versions of Internet Explorer and Firefox), this attribute can prevent the user's session cookie from being accessible to malicious client-side scripts that use document.cookie. This is not a complete solution, since HttpOnly is not supported by all browsers. More importantly, <a href=\"https:\/\/www.google.com\/search?q=XMLHTTPRequest\" target=\"blank\">XMLHTTPRequest<\/a> and other powerful browser technologies provide read access to HTTP headers, including the Set-Cookie header in which the HttpOnly flag is set.  Assume all input is malicious. Use an \"<a href=\"https:\/\/www.google.com\/search?q=accept known good\" target=\"blank\">accept known good<\/a>\" <a href=\"https:\/\/www.google.com\/search?q=input validation\" target=\"blank\">input validation<\/a> strategy, i.e., use an allow list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a deny list). However, deny lists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.  When performing <a href=\"https:\/\/www.google.com\/search?q=input validation\" target=\"blank\">input validation<\/a>, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if you are expecting colors such as \"red\" or \"blue.\"  Ensure that you perform input validation at well-defined interfaces within the application. This will help protect the application even if a component is reused or moved elsewhere.","alertReferences":["https:\/\/owasp.org\/www-community\/attacks\/xss\/","https:\/\/cwe.mitre.org\/data\/definitions\/79.html"],"alertTechTargeted":"All","alertCWEID":"79","alertID":"40026","alertWASCID":"8","alertRisk":"High","alertSummary":"<a href=\"https:\/\/www.google.com\/search?q=Cross-site Scripting\" target=\"blank\">Cross-site Scripting<\/a> (XSS) is an attack technique that involves echoing attacker-supplied code into a user\u2019s browser instance. A browser instance can be a standard web browser client, or a browser object embedded in a software product such as the browser within <a href=\"https:\/\/www.google.com\/search?q=WinAmp\" target=\"blank\">WinAmp<\/a>, an <a href=\"https:\/\/www.google.com\/search?q=RSS reader\" target=\"blank\">RSS reader<\/a>, or an email client. The code itself is usually written in HTML\/JavaScript, but may also extend to VBScript, ActiveX, Java, Flash, or any other browser-supported technology.\nWhen an attacker gets a user\u2019s browser to execute his\/her code, the code will run within the <a href=\"https:\/\/www.google.com\/search?q=security context\" target=\"blank\">security context<\/a> (or zone) of the hosting web site. With this level of privilege, the code has the ability to read, modify and transmit any sensitive data accessible by the browser. A Cross-site Scripted user could have his\/her account hijacked (cookie theft), their browser redirected to another location, or possibly shown fraudulent content delivered by the web site they are visiting. Cross-site Scripting attacks essentially compromise the trust relationship between a user and the web site. Applications utilizing browser object instances which load content from the file system may execute code under the local machine zone allowing for system compromise."},"132":{"alertType":"Active","alertOtherInfo":"N\/A","alertName":"SQL Injection - MsSQL","alertSolution":"Do not trust client side input, even if there is client side validation in place. In general, type check all data on the server side. If the application uses <a href=\"https:\/\/www.google.com\/search?q=JDBC\" target=\"blank\">JDBC<\/a>, use PreparedStatement or CallableStatement, with parameters passed by '?' If the application uses <a href=\"https:\/\/www.google.com\/search?q=ASP.net\" target=\"blank\">ASP<\/a>, use ADO Command Objects with strong type checking and parameterized queries. If <a href=\"https:\/\/www.google.com\/search?q=database Stored Procedures\" target=\"blank\">database Stored Procedures<\/a> can be used, use them. Do *not* concatenate strings into queries in the stored procedure, or use 'exec', 'exec immediate', or equivalent functionality! Do not create dynamic SQL queries using simple string concatenation. Escape all data received from the client. Apply an 'allow list' of allowed characters, or a 'deny list' of disallowed characters in user input. Apply the <a href=\"https:\/\/www.google.com\/search?q=principle of least privilege\" target=\"blank\">principle of least privilege<\/a> by using the least privileged database user possible. In particular, avoid using the 'sa' or 'db-owner' database users. This does not eliminate <a href=\"https:\/\/www.google.com\/search?q=SQL injection\" target=\"blank\">SQL injection<\/a>, but minimizes its impact. Grant the minimum database access that is necessary for the application.","alertReferences":["https:\/\/cheatsheetseries.owasp.org\/cheatsheets\/SQL_Injection_Prevention_Cheat_Sheet.html"],"alertTechTargeted":"Db \/ Microsoft SQL Server","alertCWEID":"89","alertID":"40027","alertWASCID":"19","alertRisk":"High","alertSummary":"<a href=\"https:\/\/www.google.com\/search?q=SQL injection\" target=\"blank\">SQL injection<\/a> may be possible."},"133":{"alertType":"Active","alertOtherInfo":"N\/A","alertName":"ELMAH Information Leak","alertSolution":"Consider whether or not <a href=\"https:\/\/www.google.com\/search?q=ELMAH\" target=\"blank\">ELMAH<\/a> is actually required in production, if it isn't then disable it. If it is then ensure access to it requires authentication and authorization. See also: https:\/\/elmah.github.io\/a\/securing-error-log-pages\/","alertReferences":["https:\/\/www.troyhunt.com\/aspnet-session-hijacking-with-google\/","https:\/\/www.nuget.org\/packages\/elmah","https:\/\/elmah.github.io\/"],"alertTechTargeted":"Db \/ Microsoft SQL Server","alertCWEID":"94","alertID":"40028","alertWASCID":"14","alertRisk":"Medium","alertSummary":"The <a href=\"https:\/\/www.google.com\/search?q=Error Logging Modules and Handlers\" target=\"blank\">Error Logging Modules and Handlers<\/a> (ELMAH [elmah.axd]) HTTP Module was found to be available. This module can leak a significant amount of valuable information."},"134":{"alertType":"Active","alertOtherInfo":"N\/A","alertName":"Trace.axd Information Leak","alertSolution":"Consider whether or not <a href=\"https:\/\/www.google.com\/search?q=ASP.NET Trace Viewer\" target=\"blank\">Trace Viewer<\/a> is actually required in production, if it isn't then disable it. If it is then ensure access to it requires authentication and authorization.","alertReferences":["https:\/\/msdn.microsoft.com\/en-us\/library\/bb386420.aspx","https:\/\/msdn.microsoft.com\/en-us\/library\/wwh16c6c.aspx","https:\/\/www.dotnetperls.com\/trace"],"alertTechTargeted":"Db \/ Microsoft SQL Server","alertCWEID":"215","alertID":"40029","alertWASCID":"13","alertRisk":"Medium","alertSummary":"The <a href=\"https:\/\/www.google.com\/search?q=ASP.NET Trace Viewer\" target=\"blank\">ASP.NET Trace Viewer<\/a> (trace.axd) was found to be available. This component can leak a significant amount of valuable information."},"135":{"alertType":"Active","alertOtherInfo":"N\/A","alertName":".htaccess Information Leak","alertSolution":"Ensure the <a href=\"https:\/\/www.google.com\/search?q=.htaccess file\" target=\"blank\">.htaccess file<\/a> is not accessible.","alertReferences":["https:\/\/developer.mozilla.org\/en-US\/docs\/Learn\/Server-side\/Apache_Configuration_htaccess","https:\/\/httpd.apache.org\/docs\/2.4\/howto\/htaccess.html"],"alertTechTargeted":"WS \/ Apache","alertCWEID":"94","alertID":"40032","alertWASCID":"14","alertRisk":"Medium","alertSummary":"<a href=\"https:\/\/www.google.com\/search?q=htaccess files\" target=\"blank\">htaccess files<\/a> can be used to alter the configuration of the <a href=\"https:\/\/www.google.com\/search?q=Apache Web Server\" target=\"blank\">Apache Web Server<\/a> software to enable\/disable additional functionality and features that the Apache Web Server software has to offer."},"136":{"alertType":"Active","alertOtherInfo":"N\/A","alertName":".env Information Leak","alertSolution":"Ensure the <a href=\"https:\/\/www.google.com\/search?q=.env file\" target=\"blank\">.env file<\/a> is not accessible.","alertReferences":["https:\/\/www.google.com\/search?q=db_password+filetype%3Aenv","https:\/\/mobile.twitter.com\/svblxyz\/status\/1045013939904532482"],"alertTechTargeted":"All","alertCWEID":"215","alertID":"40034","alertWASCID":"13","alertRisk":"Medium","alertSummary":"One or more <a href=\"https:\/\/www.google.com\/search?q=.env files\" target=\"blank\">.env files<\/a> seems to have been located on the server. These files often expose infrastructure or administrative account credentials, API or <a href=\"https:\/\/www.google.com\/search?q=APP keys\" target=\"blank\">APP keys<\/a>, or other sensitive configuration information."},"137":{"alertType":"Active","alertOtherInfo":"cvs_dir","alertName":"Hidden File Found","alertSolution":"Consider whether or not the component is actually required in production, if it isn't then disable it. If it is then ensure access to it requires appropriate authentication and authorization, or limit exposure to internal systems or specific source IPs, etc.","alertReferences":["https:\/\/blog.hboeck.de\/archives\/892-Introducing-Snallygaster-a-Tool-to-Scan-for-Secrets-on-Web-Servers.html"],"alertTechTargeted":"All","alertCWEID":"538","alertID":"40035","alertWASCID":"13","alertRisk":"Medium","alertSummary":"A sensitive file was identified as accessible or available. This may leak administrative, configuration, or credential information which can be leveraged by a malicious individual to further attack the system or conduct social engineering efforts."},"138":{"alertType":"Active","alertOtherInfo":"N\/A","alertName":"Spring Actuator Information Leak","alertSolution":"Disable the <a href=\"https:\/\/www.google.com\/search?q=Health Actuators\" target=\"blank\">Health Actuators<\/a> and other actuators, or restrict them to administrative users.","alertReferences":["https:\/\/docs.spring.io\/spring-boot\/docs\/current\/actuator-api\/htmlsingle\/#overview"],"alertTechTargeted":"Language \/ Java","alertCWEID":"215","alertID":"40042","alertWASCID":"13","alertRisk":"Medium","alertSummary":"<a href=\"https:\/\/www.google.com\/search?q=Spring Actuator for Health\" target=\"blank\">Spring Actuator for Health<\/a> is enabled and may reveal sensitive information about this application. Spring Actuators can be used for real monitoring purposes, but should be used with caution as to not expose too much information about the application or the infrastructure running it."},"139":{"alertType":"Active","alertOtherInfo":"N\/A","alertName":"Log4Shell","alertSolution":"N\/A","alertReferences":"N\/A","alertTechTargeted":"N\/A","alertCWEID":"N\/A","alertID":"40043","alertWASCID":"N\/A","alertRisk":"N\/A","alertSummary":"See child errors."},"30":{"alertType":"Passive","alertOtherInfo":"The following pattern was used: \\bFIXME\\b and was detected in the element starting with: \"<!-- FixMe: cookie: root=true; Secure -->\", see evidence field for the suspicious comment\/snippet.","alertName":"Information Disclosure - Suspicious Comments","alertSolution":"Remove all comments that return information that may help an attacker and fix any underlying problems they refer to.","alertReferences":"N\/A","alertTechTargeted":"All","alertCWEID":"200","alertID":"10027","alertWASCID":"13","alertRisk":"Informational","alertSummary":"The response appears to contain suspicious comments which may help an attacker. Note: Matches made within script blocks or files are against the entire content not only comments."},"31":{"alertType":"Passive","alertOtherInfo":"The <a href=\"https:\/\/www.google.com\/search?q=301\" target=\"blank\">301<\/a> or <a href=\"https:\/\/www.google.com\/search?q=302\" target=\"blank\">302<\/a> response to a request for the following URL appeared to contain user input in the location header:  https:\/\/example.com\/transact  The user input found was:  place=evil.com  The context was:  http:\/\/evil.com","alertName":"Open Redirect","alertSolution":"To avoid the <a href=\"https:\/\/www.google.com\/search?q=open redirect vulnerability\" target=\"blank\">open redirect vulnerability<\/a>, parameters of the application script\/program must be validated before sending 302 HTTP code (redirect) to the client browser. Implement safe redirect functionality that only redirects to <a href=\"https:\/\/www.google.com\/search?q=relative URI\" target=\"blank\">relative URI'<\/a>s, or a list of trusted domains","alertReferences":["https:\/\/cheatsheetseries.owasp.org\/cheatsheets\/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html","https:\/\/cwe.mitre.org\/data\/definitions\/601.html"],"alertTechTargeted":"All","alertCWEID":"601","alertID":"10028","alertWASCID":"38","alertRisk":"High","alertSummary":"Open redirects are one of the OWASP 2010 Top Ten vulnerabilities. This check looks at user-supplied input in query string parameters and <a href=\"https:\/\/www.google.com\/search?q=POST data web development\" target=\"blank\">POST data<\/a> to identify where open redirects might be possible. Open redirects occur when an application allows user-supplied input (e.g. http:\/\/nottrusted.com) to control an offsite redirect. This is generally a pretty accurate way to find where 301 or 302 redirects could be exploited by spammers or phishing attacks."},"32":{"alertType":"Passive","alertOtherInfo":"An attacker may be able to <a href=\"https:\/\/www.google.com\/search?q=poison cookie values\" target=\"blank\">poison cookie values<\/a> through URL parameters.  Try injecting a semicolon to see if you can add cookie values (e.g. name=controlledValue;name=anotherValue;).  This was identified at:  https:\/\/example.com\/transact  User-input was found in the following cookie: value=poison; SameSite=Strict  The user input was: place=poison","alertName":"Cookie Poisoning","alertSolution":"Do not allow user input to control cookie names and values. If some query string parameters must be set in cookie values, be sure to filter out semicolon's that can serve as name\/value pair delimiters.","alertReferences":["https:\/\/en.wikipedia.org\/wiki\/HTTP_cookie","https:\/\/cwe.mitre.org\/data\/definitions\/565.html"],"alertTechTargeted":"All","alertCWEID":"565","alertID":"10029","alertWASCID":"20","alertRisk":"Informational","alertSummary":"This check looks at user-supplied input in query string parameters and <a href=\"https:\/\/www.google.com\/search?q=POST data web development\" target=\"blank\">POST data<\/a> to identify where cookie parameters might be controlled. This is called a <a href=\"https:\/\/www.google.com\/search?q=cookie poisoning attack\" target=\"blank\">cookie poisoning attack<\/a>, and becomes exploitable when an attacker can manipulate the cookie in various ways. In some cases this will not be exploitable, however, allowing URL parameters to set cookie values is generally considered a bug."},"33":{"alertType":"Passive","alertOtherInfo":"A(n) [Content-Type HTTP header] tag [charset] attribute  The user input found was: cs=utf-8  The charset value it controlled was: utf-8","alertName":"User Controllable Charset","alertSolution":"Force <a href=\"https:\/\/www.google.com\/search?q=UTF-8\" target=\"blank\">UTF-8<\/a> in all charset declarations. If user-input is required to decide a charset declaration, ensure that only an allowed list is used.","alertReferences":"N\/A","alertTechTargeted":"All","alertCWEID":"20","alertID":"10030","alertWASCID":"20","alertRisk":"Informational","alertSummary":"This check looks at user-supplied input in query string parameters and <a href=\"https:\/\/www.google.com\/search?q=POST data web development\" target=\"blank\">POST data<\/a> to identify where Content-Type or meta tag charset declarations might be user-controlled. Such charset declarations should always be declared by the application. If an attacker can control the response charset, they could manipulate the HTML to perform <a href=\"https:\/\/www.google.com\/search?q=XSS\" target=\"blank\">XSS<\/a> or other attacks. For example, an attacker controlling the  element charset value is able to declare UTF-7 and is also able to include enough <a href=\"https:\/\/www.google.com\/search?q=What is a payload? web development\" target=\"blank\">user-controlled payload<\/a> early in the HTML document to have it interpreted as UTF-7. By encoding their payload with UTF-7 the attacker is able to bypass any server-side XSS protections and embed script in the page."},"34":{"alertType":"Passive","alertOtherInfo":"User-controlled HTML attribute values were found. Try injecting special characters to see if <a href=\"https:\/\/www.google.com\/search?q=XSS\" target=\"blank\">XSS<\/a> might be possible. The page at the following URL:  http:\/\/example.com\/i.php?name=fred  appears to include user input in:   a(n) [img] tag [alt] attribute   The user input found was: name=fred  The user-controlled value was: pscanrules.usercontrolledhtmlattributes.","alertName":"User Controllable HTML Element Attribute (Potential XSS)","alertSolution":"Validate all input and sanitize output it before writing to any HTML attributes.","alertReferences":["https:\/\/cheatsheetseries.owasp.org\/cheatsheets\/Input_Validation_Cheat_Sheet.html"],"alertTechTargeted":"All","alertCWEID":"20","alertID":"10031","alertWASCID":"20","alertRisk":"Informational","alertSummary":"This check looks at user-supplied input in query string parameters and <a href=\"https:\/\/www.google.com\/search?q=POST data web development\" target=\"blank\">POST data<\/a> to identify where certain HTML attribute values might be controlled. This provides hot-spot detection for <a href=\"https:\/\/www.google.com\/search?q=XSS\" target=\"blank\">XSS<\/a> (cross-site scripting) that will require further review by a security analyst to determine exploitability."},"35":{"alertType":"Passive","alertOtherInfo":"N\/A","alertName":"Viewstate","alertSolution":"N\/A","alertReferences":"N\/A","alertTechTargeted":"N\/A","alertCWEID":"N\/A","alertID":"10032","alertWASCID":"N\/A","alertRisk":"N\/A","alertSummary":"See child errors."},"36":{"alertType":"Passive","alertOtherInfo":"[]","alertName":"Potential IP Addresses Found in the Viewstate","alertSolution":"Verify the provided information isn't confidential.","alertReferences":"N\/A","alertTechTargeted":"All","alertCWEID":"642","alertID":"10032-1","alertWASCID":"14","alertRisk":"Medium","alertSummary":"The following potential IP addresses were found being <a href=\"https:\/\/www.google.com\/search?q=serialized computing\" target=\"blank\">serialized<\/a> in the <a href=\"https:\/\/www.google.com\/search?q=viewstate field\" target=\"blank\">viewstate field<\/a>:"},"37":{"alertType":"Passive","alertOtherInfo":"[]","alertName":"Emails Found in the Viewstate","alertSolution":"Verify the provided information isn't confidential.","alertReferences":"N\/A","alertTechTargeted":"All","alertCWEID":"642","alertID":"10032-2","alertWASCID":"14","alertRisk":"Medium","alertSummary":"The following emails were found being <a href=\"https:\/\/www.google.com\/search?q=serialized computing\" target=\"blank\">serialized<\/a> in the <a href=\"https:\/\/www.google.com\/search?q=viewstate field\" target=\"blank\">viewstate field<\/a>:"},"38":{"alertType":"Passive","alertOtherInfo":"N\/A","alertName":"Old Asp.Net Version in Use","alertSolution":"Ensure the engaged framework is still supported by Microsoft.","alertReferences":"N\/A","alertTechTargeted":"All","alertCWEID":"642","alertID":"10032-3","alertWASCID":"14","alertRisk":"Low","alertSummary":"This website uses <a href=\"https:\/\/www.google.com\/search?q=ASP.NET\" target=\"blank\">ASP.NET<\/a> version 1.0 or 1.1."},"39":{"alertType":"Passive","alertOtherInfo":"N\/A","alertName":"Viewstate without MAC Signature (Unsure)","alertSolution":"Ensure the <a href=\"https:\/\/www.google.com\/search?q=MAC address\" target=\"blank\">MAC<\/a> is set for all pages on this website.","alertReferences":["https:\/\/learn.microsoft.com\/en-us\/previous-versions\/msp-n-p\/ff649308(v=pandp.10)"],"alertTechTargeted":"All","alertCWEID":"642","alertID":"10032-4","alertWASCID":"14","alertRisk":"High","alertSummary":"This website uses <a href=\"https:\/\/www.google.com\/search?q=ASP.NET\u2019s Viewstate\" target=\"blank\">ASP.NET\u2019s Viewstate<\/a> but maybe without any <a href=\"https:\/\/www.google.com\/search?q=MAC address\" target=\"blank\">MAC<\/a>."},"140":{"alertType":"Active","alertOtherInfo":"N\/A","alertName":"Log4Shell (CVE-2021-44228)","alertSolution":"Upgrade <a href=\"https:\/\/www.google.com\/search?q=Log4j2\" target=\"blank\">Log4j2<\/a> to version 2.17.1 or newer. In previous releases (>2.10) this behavior can be mitigated by setting system property \"log4j2.formatMsgNoLookups\" to \"true\" or by removing the JndiLookup class from the classpath (example: zip -q -d log4j-core-*.jar org\/apache\/logging\/log4j\/core\/lookup\/JndiLookup.class). Java 8u121 (see https:\/\/www.oracle.com\/java\/technologies\/javase\/8u121-relnotes.html) protects against remote code execution by defaulting \"com.sun.jndi.rmi.object.trustURLCodebase\" and \"com.sun.jndi.cosnaming.object.trustURLCodebase\" to \"false\".","alertReferences":["https:\/\/www.lunasec.io\/docs\/blog\/log4j-zero-day\/","https:\/\/nvd.nist.gov\/vuln\/detail\/CVE-2021-44228"],"alertTechTargeted":"Language \/ Java","alertCWEID":"117","alertID":"40043-1","alertWASCID":"20","alertRisk":"High","alertSummary":"<a href=\"https:\/\/www.google.com\/search?q=Apache Log4j2 JNDI\" target=\"blank\">Apache Log4j2 <=2.14.1 JNDI<\/a> features used in configuration, log messages, and parameters do not protect against attacker controlled <a href=\"https:\/\/www.google.com\/search?q=LDAP endpoints\" target=\"blank\">LDAP<\/a> and other JNDI related endpoints. An attacker who can control log messages or log message parameters can execute arbitrary code loaded from LDAP servers when message lookup substitution is enabled. From log4j 2.15.0, this behavior has been disabled by default."},"141":{"alertType":"Active","alertOtherInfo":"N\/A","alertName":"Log4Shell (CVE-2021-45046)","alertSolution":"Upgrade <a href=\"https:\/\/www.google.com\/search?q=Log4j2\" target=\"blank\">Log4j2<\/a> to version 2.17.1 or newer.","alertReferences":["https:\/\/www.lunasec.io\/docs\/blog\/log4j-zero-day\/","https:\/\/nvd.nist.gov\/vuln\/detail\/CVE-2021-45046"],"alertTechTargeted":"Language \/ Java","alertCWEID":"117","alertID":"40043-2","alertWASCID":"20","alertRisk":"High","alertSummary":"It was found that the fix to address <a href=\"https:\/\/www.google.com\/search?q=CVE-2021-44228\" target=\"blank\">CVE-2021-44228<\/a> in <a href=\"https:\/\/www.google.com\/search?q=Apache Log4j 2.15.0\" target=\"blank\">Apache Log4j 2.15.0<\/a> was incomplete in certain non-default configurations. This could allow attackers to craft malicious input data using a <a href=\"https:\/\/www.google.com\/search?q=JNDI Lookup pattern\" target=\"blank\">JNDI Lookup pattern<\/a> resulting in an information leak and remote code execution in some environments."},"142":{"alertType":"Active","alertOtherInfo":"N\/A","alertName":"Spring4Shell","alertSolution":"Upgrade <a href=\"https:\/\/www.google.com\/search?q=Spring Framework\" target=\"blank\">Spring Framework<\/a> to versions 5.3.18, 5.2.20, or newer.","alertReferences":["https:\/\/nvd.nist.gov\/vuln\/detail\/CVE-2022-22965","https:\/\/www.rapid7.com\/blog\/post\/2022\/03\/30\/spring4shell-zero-day-vulnerability-in-spring-framework\/","https:\/\/spring.io\/blog\/2022\/03\/31\/spring-framework-rce-early-announcement#vulnerability","https:\/\/tanzu.vmware.com\/security\/cve-2022-22965"],"alertTechTargeted":"Language \/ Java","alertCWEID":"78","alertID":"40045","alertWASCID":"20","alertRisk":"High","alertSummary":"The application appears to be vulnerable to <a href=\"https:\/\/www.google.com\/search?q=CVE-2022-22965\" target=\"blank\">CVE-2022-22965<\/a> (otherwise known as Spring4Shell) - <a href=\"https:\/\/www.google.com\/search?q=remote code execution\" target=\"blank\">remote code execution<\/a> (RCE) via data binding."},"143":{"alertType":"Passive","alertOtherInfo":"N\/A","alertName":"Insecure JSF ViewState","alertSolution":"Secure VIEWSTATE with a MAC specific to your environment","alertReferences":["https:\/\/www.trustwave.com\/spiderlabs\/advisories\/TWSL2010-001.txt"],"alertTechTargeted":"All","alertCWEID":"642","alertID":"90001","alertWASCID":"14","alertRisk":"Medium","alertSummary":"The response at the following URL contains a <a href=\"https:\/\/www.google.com\/search?q=ViewState value\" target=\"blank\">ViewState value<\/a> that has no cryptographic protections."},"144":{"alertType":"Passive","alertOtherInfo":"N\/A","alertName":"Charset Mismatch","alertSolution":"Force UTF-8 for all text content in both the HTTP header and meta tags in HTML or encoding declarations in XML.","alertReferences":["https:\/\/code.google.com\/p\/browsersec\/wiki\/Part2#Character_set_handling_and_detection"],"alertTechTargeted":"All","alertCWEID":"436","alertID":"90011","alertWASCID":"15","alertRisk":"Informational","alertSummary":"This check identifies responses where the <a href=\"https:\/\/www.google.com\/search?q=HTTP Content-Type header\" target=\"blank\">HTTP Content-Type header<\/a> declares a charset different from the charset defined by the body of the HTML or XML. When there\u2019s a charset mismatch between the HTTP header and content body Web browsers can be forced into an undesirable <a href=\"https:\/\/www.google.com\/search?q=content-sniffing mode\" target=\"blank\">content-sniffing mode<\/a> to determine the content\u2019s correct character set."},"145":{"alertType":"Active","alertOtherInfo":"N\/A","alertName":"XSLT Injection","alertSolution":"Sanitize and analyze every user input coming from any client-side.","alertReferences":["https:\/\/www.contextis.com\/blog\/xslt-server-side-injection-attacks"],"alertTechTargeted":"All","alertCWEID":"91","alertID":"90017","alertWASCID":"23","alertRisk":"Medium","alertSummary":"Injection using <a href=\"https:\/\/www.google.com\/search?q=XSL transformations\" target=\"blank\">XSL transformations<\/a> may be possible, and may allow an attacker to read system information, read and write files, or execute arbitrary code."},"146":{"alertType":"Active","alertOtherInfo":"N\/A","alertName":"Server Side Code Injection","alertSolution":"N\/A","alertReferences":"N\/A","alertTechTargeted":"N\/A","alertCWEID":"N\/A","alertID":"90019","alertWASCID":"N\/A","alertRisk":"N\/A","alertSummary":"See child errors."},"147":{"alertType":"Active","alertOtherInfo":"N\/A","alertName":"Server Side Code Injection - PHP Code Injection","alertSolution":"Do not trust client side input, even if there is client side validation in place. In general, type check all data on the server side and escape all data received from the client.  Avoid the use of <a href=\"https:\/\/www.google.com\/search?q=eval() functions\" target=\"blank\">eval() functions php<\/a> combined with user input data.","alertReferences":["https:\/\/cwe.mitre.org\/data\/definitions\/94.html","https:\/\/owasp.org\/www-community\/attacks\/Direct_Dynamic_Code_Evaluation_Eval%20Injection"],"alertTechTargeted":"Language \/ ASP","alertCWEID":"94","alertID":"90019-1","alertWASCID":"20","alertRisk":"High","alertSummary":"A code injection may be possible including custom code that will be evaluated by the <a href=\"https:\/\/www.google.com\/search?q=scripting engine\" target=\"blank\">scripting engine<\/a>"},"148":{"alertType":"Active","alertOtherInfo":"N\/A","alertName":"Server Side Code Injection - ASP Code Injection","alertSolution":"Do not trust client side input, even if there is client side validation in place. In general, type check all data on the server side and escape all data received from the client.  Avoid the use of eval() functions combined with user input data.","alertReferences":["https:\/\/cwe.mitre.org\/data\/definitions\/94.html","https:\/\/owasp.org\/www-community\/attacks\/Direct_Dynamic_Code_Evaluation_Eval%20Injection"],"alertTechTargeted":"Language \/ ASP","alertCWEID":"94","alertID":"90019-2","alertWASCID":"20","alertRisk":"High","alertSummary":"A code injection may be possible including custom code that will be evaluated by the scripting engine"},"149":{"alertType":"Active","alertOtherInfo":"The scan rule was able to retrieve the content of a file or command by sending [a;cat \/etc\/passwd ] to the operating system running this application","alertName":"Remote OS Command Injection","alertSolution":"If at all possible, use <a href=\"https:\/\/www.google.com\/search?q=library calls\" target=\"blank\">library calls<\/a> rather than external processes to recreate the desired functionality.  Run your code in a \"jail\" or similar <a href=\"https:\/\/www.google.com\/search?q=sandbox environment\" target=\"blank\">sandbox environment<\/a> that enforces strict boundaries between the process and the operating system. This may effectively restrict which files can be accessed in a particular directory or which commands can be executed by your software.  OS-level examples include the <a href=\"https:\/\/www.google.com\/search?q=Unix chroot jail\" target=\"blank\">Unix chroot jail<\/a>, <a href=\"https:\/\/www.google.com\/search?q=AppArmor\" target=\"blank\">AppArmor<\/a>, and <a href=\"https:\/\/www.google.com\/search?q=SELinux\" target=\"blank\">SELinux<\/a>. In general, managed code may provide some protection. For example, <a href=\"https:\/\/www.google.com\/search?q=java.io.FilePermission\" target=\"blank\">java.io.FilePermission<\/a> in the <a href=\"https:\/\/www.google.com\/search?q=Java SecurityManager\" target=\"blank\">Java SecurityManager<\/a> allows you to specify restrictions on file operations. This may not be a feasible solution, and it only limits the impact to the operating system; the rest of your application may still be subject to compromise.  For any data that will be used to generate a command to be executed, keep as much of that data out of external control as possible. For example, in web applications, this may require storing the command locally in the session's state instead of sending it out to the client in a hidden form field.  Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.  For example, consider using the <a href=\"https:\/\/www.google.com\/search?q=ESAPI Encoding control\" target=\"blank\">ESAPI Encoding control<\/a> or a similar tool, library, or framework. These will help the programmer encode outputs in a manner less prone to error.  If you need to use dynamically-generated query strings or commands in spite of the risk, properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allow list (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping\/filtering step. Be careful of <a href=\"https:\/\/www.google.com\/search?q=argument injection\" target=\"blank\">argument injection<\/a>.  If the program to be executed allows arguments to be specified within an input file or from standard input, then consider using that mode to pass arguments instead of the command line.  If available, use structured mechanisms that automatically enforce the separation between data and code. These mechanisms may be able to provide the relevant quoting, encoding, and validation automatically, instead of relying on the developer to provide this capability at every point where output is generated.  Some languages offer multiple functions that can be used to invoke commands. Where possible, identify any function that invokes a command shell using a single string, and replace it with a function that requires individual arguments. These functions typically perform appropriate quoting and filtering of arguments. For example, in C, the <a href=\"https:\/\/www.google.com\/search?q=system()\" target=\"blank\">system()<\/a> function accepts a string that contains the entire command to be executed, whereas execl(), execve(), and others require an array of strings, one for each argument. In Windows, <a href=\"https:\/\/www.google.com\/search?q=CreateProcess()\" target=\"blank\">CreateProcess()<\/a> only accepts one command at a time. In Perl, if system() is provided with an array of arguments, then it will quote each of the arguments.  Assume all input is malicious. Use an \"<a href=\"https:\/\/www.google.com\/search?q=accept known good\" target=\"blank\">accept known good<\/a>\" <a href=\"https:\/\/www.google.com\/search?q=input validation\" target=\"blank\">input validation<\/a> strategy, i.e., use an allow list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a deny list). However, deny lists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.  When performing <a href=\"https:\/\/www.google.com\/search?q=input validation\" target=\"blank\">input validation<\/a>, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if you are expecting colors such as \"red\" or \"blue.\"  When constructing OS command strings, use stringent allow lists that limit the character set based on the expected value of the parameter in the request. This will indirectly limit the scope of an attack, but this technique is less important than proper output encoding and escaping.  Note that proper output encoding, escaping, and quoting is the most effective solution for preventing <a href=\"https:\/\/www.google.com\/search?q=OS command injection\" target=\"blank\">OS command injection<\/a>, although input validation may provide some defense-in-depth. This is because it effectively limits what will appear in output. Input validation will not always prevent OS command injection, especially if you are required to support free-form text fields that could contain arbitrary characters. For example, when invoking a mail program, you might need to allow the subject field to contain otherwise-dangerous inputs like \";\" and \">\" characters, which would need to be escaped or otherwise handled. In this case, stripping the character might reduce the risk of OS command injection, but it would produce incorrect behavior because the subject field would not be recorded as the user intended. This might seem to be a minor inconvenience, but it could be more important when the program relies on well-structured subject lines in order to pass messages to other components.  Even if you make a mistake in your validation (such as forgetting one out of 100 input fields), appropriate encoding is still likely to protect you from injection-based attacks. As long as it is not done in isolation, input validation is still a useful technique, since it may significantly reduce your attack surface, allow you to detect some attacks, and provide other security benefits that proper encoding does not address.","alertReferences":["https:\/\/cwe.mitre.org\/data\/definitions\/78.html","https:\/\/owasp.org\/www-community\/attacks\/Command_Injection"],"alertTechTargeted":"OS \/ Linux","alertCWEID":"78","alertID":"90020","alertWASCID":"31","alertRisk":"High","alertSummary":"Attack technique used for unauthorized execution of operating system commands. This attack is possible when an application accepts untrusted input to build operating system commands in an insecure manner involving improper <a href=\"https:\/\/www.google.com\/search?q=data sanitization\" target=\"blank\">data sanitization<\/a>, and\/or improper calling of external programs."},"40":{"alertType":"Passive","alertOtherInfo":"N\/A","alertName":"Viewstate without MAC Signature (Sure)","alertSolution":"Ensure the <a href=\"https:\/\/www.google.com\/search?q=MAC address\" target=\"blank\">MAC<\/a> is set for all pages on this website.","alertReferences":["https:\/\/learn.microsoft.com\/en-us\/previous-versions\/msp-n-p\/ff649308(v=pandp.10)"],"alertTechTargeted":"All","alertCWEID":"642","alertID":"10032-5","alertWASCID":"14","alertRisk":"High","alertSummary":"This website uses <a href=\"https:\/\/www.google.com\/search?q=ASP.NET\u2019s Viewstate\" target=\"blank\">ASP.NET\u2019s Viewstate<\/a> but without any <a href=\"https:\/\/www.google.com\/search?q=MAC address\" target=\"blank\">MAC<\/a>."},"41":{"alertType":"Passive","alertOtherInfo":"N\/A","alertName":"Split Viewstate in Use","alertSolution":"None - the guys running the server may have tuned the configuration as this isn't the default setting.","alertReferences":"N\/A","alertTechTargeted":"All","alertCWEID":"642","alertID":"10032-6","alertWASCID":"14","alertRisk":"Informational","alertSummary":"This website uses <a href=\"https:\/\/www.google.com\/search?q=ASP.NET\u2019s Viewstate\" target=\"blank\">ASP.NET\u2019s Viewstate<\/a> and its value is split into several chunks."},"42":{"alertType":"Passive","alertOtherInfo":"Web server identified: <a href=\"https:\/\/www.google.com\/search?q=Apache 2\" target=\"blank\">Apache 2<\/a>","alertName":"Directory Browsing","alertSolution":"Configure the web server to disable directory browsing.","alertReferences":["https:\/\/cwe.mitre.org\/data\/definitions\/548.html"],"alertTechTargeted":"All","alertCWEID":"548","alertID":"10033","alertWASCID":"16","alertRisk":"Medium","alertSummary":"It is possible to view a listing of the directory contents. Directory listings may reveal hidden scripts, include files, backup source files, etc., which can be accessed to reveal sensitive information."},"43":{"alertType":"Passive","alertOtherInfo":"<a href=\"https:\/\/www.google.com\/search?q=OpenSSL\/1.0.1e\" target=\"blank\">OpenSSL\/1.0.1e<\/a> is in use. Note however that the reported version could contain <a href=\"https:\/\/www.google.com\/search?q=back-ported security fixes\" target=\"blank\">back-ported security fixes<\/a>, and so the issue could be a false positive. This is common on <a href=\"https:\/\/www.google.com\/search?q=Red Hat\" target=\"blank\">Red Hat<\/a>, for instance.","alertName":"Heartbleed OpenSSL Vulnerability (Indicative)","alertSolution":"Update to <a href=\"https:\/\/www.google.com\/search?q=OpenSSL 1.0.1g\" target=\"blank\">OpenSSL 1.0.1g<\/a> or later. Re-issue <a href=\"https:\/\/www.google.com\/search?q=HTTPS certificates\" target=\"blank\">HTTPS certificates<\/a>. Change <a href=\"https:\/\/www.google.com\/search?q=asymmetric private keys\" target=\"blank\">asymmetric private keys<\/a> and <a href=\"https:\/\/www.google.com\/search?q=shared secret keys\" target=\"blank\">shared secret keys<\/a>, since these may have been compromised, with no evidence of compromise in the server log files.","alertReferences":["https:\/\/nvd.nist.gov\/vuln\/detail\/CVE-2014-0160"],"alertTechTargeted":"All","alertCWEID":"119","alertID":"10034","alertWASCID":"20","alertRisk":"High","alertSummary":"The <a href=\"https:\/\/www.google.com\/search?q=TLS\" target=\"blank\">TLS<\/a> and <a href=\"https:\/\/www.google.com\/search?q=DTLS\" target=\"blank\">DTLS<\/a> implementations in <a href=\"https:\/\/www.google.com\/search?q=OpenSSL 1.0.1\" target=\"blank\">OpenSSL 1.0.1<\/a> before 1.0.1g do not properly handle <a href=\"https:\/\/www.google.com\/search?q=Heartbeat Extension packets\" target=\"blank\">Heartbeat Extension packets<\/a>, which allows remote attackers to obtain sensitive information from process memory via crafted packets that trigger a <a href=\"https:\/\/www.google.com\/search?q=buffer over-read\" target=\"blank\">buffer over-read<\/a>, potentially disclosing sensitive information."},"44":{"alertType":"Passive","alertOtherInfo":"N\/A","alertName":"Strict-Transport-Security Header","alertSolution":"N\/A","alertReferences":"N\/A","alertTechTargeted":"N\/A","alertCWEID":"N\/A","alertID":"10035","alertWASCID":"N\/A","alertRisk":"N\/A","alertSummary":"See child errors."},"45":{"alertType":"Passive","alertOtherInfo":"N\/A","alertName":"Strict-Transport-Security Header Not Set","alertSolution":"Ensure that your web server, application server, <a href=\"https://www.google.com/search?q=load balancer\" target=\"blank\">load balancer</a>, etc. is configured to enforce <a href=\"https:\/\/www.google.com\/search?q=Strict-Transport-Security\" target=\"blank\">Strict-Transport-Security<\/a>.","alertReferences":["https:\/\/cheatsheetseries.owasp.org\/cheatsheets\/HTTP_Strict_Transport_Security_Cheat_Sheet.html","https:\/\/owasp.org\/www-community\/Security_Headers","https:\/\/en.wikipedia.org\/wiki\/HTTP_Strict_Transport_Security","https:\/\/caniuse.com\/stricttransportsecurity","https:\/\/datatracker.ietf.org\/doc\/html\/rfc6797"],"alertTechTargeted":"All","alertCWEID":"319","alertID":"10035-1","alertWASCID":"15","alertRisk":"Low","alertSummary":"<a href=\"https:\/\/www.google.com\/search?q=HTTP Strict Transport Security\" target=\"blank\">HTTP Strict Transport Security<\/a> (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over <a href=\"https:\/\/www.google.com\/search?q=TLS\/SSL\" target=\"blank\">TLS\/SSL<\/a>). HSTS is an IETF standards track protocol and is specified in RFC 6797."},"46":{"alertType":"Passive","alertOtherInfo":"N\/A","alertName":"Strict-Transport-Security Disabled","alertSolution":"Review the configuration of this control. Ensure that your web server, application server, <a href=\"https://www.google.com/search?q=load balancer\" target=\"blank\">load balancer</a>, etc. is configured to set <a href=\"https:\/\/www.google.com\/search?q=Strict-Transport-Security\" target=\"blank\">Strict-Transport-Security<\/a> with an appropriate max-age value.","alertReferences":["https:\/\/datatracker.ietf.org\/doc\/html\/rfc6797#section-6.2"],"alertTechTargeted":"All","alertCWEID":"319","alertID":"10035-2","alertWASCID":"15","alertRisk":"Low","alertSummary":"A <a href=\"https:\/\/www.google.com\/search?q=HTTP Strict Transport Security\" target=\"blank\">HTTP Strict Transport Security<\/a> (HSTS) header was found, but it contains the directive max-age=0 which disables the control and instructs browsers to reset any previous HSTS related settings. See RFC 6797 for further details.\nHTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over <a href=\"https:\/\/www.google.com\/search?q=TLS\/SSL\" target=\"blank\">TLS\/SSL<\/a>)."},"47":{"alertType":"Passive","alertOtherInfo":"N\/A","alertName":"Strict-Transport-Security Multiple Header Entries (Non-compliant with Spec)","alertSolution":"Ensure that only one component in your stack: code, web server, application server, <a href=\"https://www.google.com/search?q=load balancer\" target=\"blank\">load balancer</a>, etc. is configured to set or add a <a href=\"https:\/\/www.google.com\/search?q=HTTP Strict-Transport-Security\" target=\"blank\">HTTP Strict-Transport-Security<\/a> (HSTS) header.","alertReferences":["https:\/\/datatracker.ietf.org\/doc\/html\/rfc6797#section-8.1"],"alertTechTargeted":"All","alertCWEID":"319","alertID":"10035-3","alertWASCID":"15","alertRisk":"Low","alertSummary":"<a href=\"https:\/\/www.google.com\/search?q=HTTP Strict Transport Security\" target=\"blank\">HTTP Strict Transport Security<\/a> (HSTS) headers were found, a response with multiple HSTS header entries is not compliant with the specification (RFC 6797) and only the first HSTS header will be processed others will be ignored by user agents or the HSTS policy may be incorrectly applied.\nHTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over <a href=\"https:\/\/www.google.com\/search?q=TLS\/SSL\" target=\"blank\">TLS\/SSL<\/a>)."},"48":{"alertType":"Passive","alertOtherInfo":"N\/A","alertName":"Strict-Transport-Security Header on Plain HTTP Response","alertSolution":"Review the configuration of this control. Ensure that your web server, application server, <a href=\"https://www.google.com/search?q=load balancer\" target=\"blank\">load balancer</a>, etc. is configured to set <a href=\"https:\/\/www.google.com\/search?q=Strict-Transport-Security for HTTPS\" target=\"blank\">Strict-Transport-Security for HTTPS<\/a> responses.","alertReferences":["https:\/\/datatracker.ietf.org\/doc\/html\/rfc6797#section-8.1"],"alertTechTargeted":"All","alertCWEID":"319","alertID":"10035-4","alertWASCID":"15","alertRisk":"Informational","alertSummary":"A <a href=\"https:\/\/www.google.com\/search?q=HTTP Strict Transport Security\" target=\"blank\">HTTP Strict Transport Security<\/a> (HSTS) header was found, but HSTS headers are ignored on plain (non-HTTPS) responses.\nHTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over <a href=\"https:\/\/www.google.com\/search?q=TLS\/SSL\" target=\"blank\">TLS\/SSL<\/a>)."},"49":{"alertType":"Passive","alertOtherInfo":"N\/A","alertName":"Strict-Transport-Security Missing Max-Age (Non-compliant with Spec)","alertSolution":"Review the configuration of this control. Ensure that your web server, application server, <a href=\"https:\/\/www.google.com\/search?q=load balancer\" target=\"blank\">load balancer<\/a>, etc. is configured to set <a href=\"https:\/\/www.google.com\/search?q=Strict-Transport-Security\" target=\"blank\">Strict-Transport-Security<\/a> with an appropriate max-age value.","alertReferences":["https:\/\/datatracker.ietf.org\/doc\/html\/rfc6797#section-6.2"],"alertTechTargeted":"All","alertCWEID":"319","alertID":"10035-5","alertWASCID":"15","alertRisk":"Low","alertSummary":"A <a href=\"https:\/\/www.google.com\/search?q=HTTP Strict Transport Security\" target=\"blank\">HTTP Strict Transport Security<\/a> (HSTS) header was found, but it is missing the max-age directive (or the directive is missing a value). See RFC 6797 for further details.\nHTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over <a href=\"https:\/\/www.google.com\/search?q=TLS\/SSL\" target=\"blank\">TLS\/SSL<\/a>)."},"150":{"alertType":"Active","alertOtherInfo":"N\/A","alertName":"XPath Injection","alertSolution":"Use parameterized <a href=\"https:\/\/www.google.com\/search?q=XPath queries\" target=\"blank\">XPath queries<\/a> (e.g. using XQuery). This will help ensure separation between data plane and control plane.  Properly validate user input. Reject data where appropriate, filter where appropriate and escape where appropriate. Make sure input that will be used in XPath queries is safe in that context.","alertReferences":["https:\/\/owasp.org\/www-community\/attacks\/XPATH_Injection","https:\/\/owasp.org\/www-community\/attacks\/Blind_XPath_Injection","https:\/\/cwe.mitre.org\/data\/definitions\/643.html"],"alertTechTargeted":"All","alertCWEID":"643","alertID":"90021","alertWASCID":"39","alertRisk":"High","alertSummary":"<a href=\"https:\/\/www.google.com\/search?q=XPath Injection\" target=\"blank\">XPath Injection<\/a> is an attack technique used to exploit applications that construct XPath (XML Path Language) queries from user-supplied input to query or navigate XML documents. It can be used directly by an application to query an XML document, as part of a larger operation such as applying an <a href=\"https:\/\/www.google.com\/search?q=XSLT transformation\" target=\"blank\">XSLT transformation<\/a> to an XML document, or applying an XQuery to an XML document. The syntax of XPath bears some resemblance to an <a href=\"https:\/\/www.google.com\/search?q=SQL query\" target=\"blank\">SQL query<\/a>, and indeed, it is possible to form SQL-like queries on an XML document using XPath."},"151":{"alertType":"Passive","alertOtherInfo":"N\/A","alertName":"Application Error Disclosure","alertSolution":"Review the source code of this page. Implement custom error pages. Consider implementing a mechanism to provide a unique error reference\/identifier to the client (browser) while logging the details on the server side and not exposing them to the user.","alertReferences":"N\/A","alertTechTargeted":"All","alertCWEID":"200","alertID":"90022","alertWASCID":"13","alertRisk":"Medium","alertSummary":"This page contains an error\/warning message that may disclose sensitive information like the location of the file that produced the unhandled exception. This information can be used to launch further attacks against the web application. The alert could be a false positive if the error message is found inside a documentation page."},"152":{"alertType":"Active","alertOtherInfo":"N\/A","alertName":"XML External Entity Attack","alertSolution":"<a href=\"https:\/\/www.google.com\/search?q=XML External Entities\" target=\"blank\">XML External Entities<\/a> vulnerabilities arise because the application's <a href=\"https:\/\/www.google.com\/search?q=XML parsing library\" target=\"blank\">XML parsing library<\/a> supports potentially dangerous XML features. To prevent XML External Entities vulnerabilities disable the resolution of external entities and the support for <a href=\"https:\/\/www.google.com\/search?q=XInclude\" target=\"blank\">XInclude<\/a>.","alertReferences":["https:\/\/owasp.org\/www-community\/vulnerabilities\/XML_External_Entity_(XXE)_Processing","https:\/\/cheatsheetseries.owasp.org\/cheatsheets\/XML_External_Entity_Prevention_Cheat_Sheet.html","https:\/\/cwe.mitre.org\/data\/definitions\/611.html"],"alertTechTargeted":"All","alertCWEID":"611","alertID":"90023","alertWASCID":"43","alertRisk":"High","alertSummary":"This technique takes advantage of a feature of <a href=\"https:\/\/www.google.com\/search?q=XML\" target=\"blank\">XML<\/a> to build documents dynamically at the time of processing. An XML message can either provide data explicitly or by pointing to an URI where the data exists. In the attack technique, external entities may replace the entity value with malicious data, alternate referrals or may compromise the security of the data the server\/XML application has access to.\nAttackers may also use <a href=\"https:\/\/www.google.com\/search?q=XML External Entities\" target=\"blank\">External Entities<\/a> to have the web services server download malicious code or content to the server for use in secondary or follow on attacks."},"153":{"alertType":"Active","alertOtherInfo":"N\/A","alertName":"Generic Padding Oracle","alertSolution":"Update the affected server software, or modify the scripts so that they properly <a href=\"https:\/\/www.google.com\/search?q=validate encrypted data\" target=\"blank\">validate encrypted data<\/a> before attempting decryption.","alertReferences":["https:\/\/learn.microsoft.com\/en-us\/security-updates\/securitybulletins\/2010\/ms10-070","https:\/\/www.mono-project.com\/docs\/about-mono\/vulnerabilities\/","https:\/\/bugzilla.redhat.com\/show_bug.cgi?id=623799"],"alertTechTargeted":"All","alertCWEID":"209","alertID":"90024","alertWASCID":"20","alertRisk":"High","alertSummary":"By manipulating the padding on an encrypted string, an attacker is able to generate an error message that indicates a likely <a href=\"https:\/\/www.google.com\/search?q=\u2018padding oracle\u2019 vulnerability\" target=\"blank\">\u2018padding oracle\u2019 vulnerability<\/a>. Such a vulnerability can affect any application or framework that uses encryption improperly, such as some versions of <a href=\"https:\/\/www.google.com\/search?q=ASP.net\" target=\"blank\">ASP.net<\/a>, <a href=\"https:\/\/www.google.com\/search?q=Java Server Faces\" target=\"blank\">Java Server Faces<\/a>, and <a href=\"https:\/\/www.google.com\/search?q=Mono Project\" target=\"blank\">Mono<\/a>. An attacker may exploit this issue to decrypt data and recover encryption keys, potentially viewing and modifying confidential data. This rule should detect the <a href=\"https:\/\/www.google.com\/search?q=MS10-070 padding oracle vulnerability\" target=\"blank\">MS10-070 padding oracle vulnerability<\/a> in ASP.net if CustomErrors are enabled for that."},"154":{"alertType":"Passive","alertOtherInfo":"The origin domain used for comparison was:  subdomain.example.com name=value","alertName":"Loosely Scoped Cookie","alertSolution":"Always scope cookies to a FQDN (<a href=\"https:\/\/www.google.com\/search?q=Fully Qualified Domain Name\" target=\"blank\">Fully Qualified Domain Name<\/a>).","alertReferences":["https:\/\/tools.ietf.org\/html\/rfc6265#section-4.1","https:\/\/owasp.org\/www-project-web-security-testing-guide\/v41\/4-Web_Application_Security_Testing\/06-Session_Management_Testing\/02-Testing_for_Cookies_Attributes.html","https:\/\/code.google.com\/p\/browsersec\/wiki\/Part2#Same-origin_policy_for_cookies"],"alertTechTargeted":"All","alertCWEID":"565","alertID":"90033","alertWASCID":"15","alertRisk":"Informational","alertSummary":"Cookies can be scoped by domain or path. This check is only concerned with <a href=\"https:\/\/www.google.com\/search?q=domain scope\" target=\"blank\">domain scope<\/a>.The domain scope applied to a cookie determines which domains can access it. For example, a cookie can be scoped strictly to a subdomain e.g. www.nottrusted.com, or loosely scoped to a parent domain e.g. nottrusted.com. In the latter case, any subdomain of nottrusted.com can access the cookie. Loosely scoped cookies are common in mega-applications like google.com and live.com. Cookies set from a subdomain like app.foo.bar are transmitted only to that domain by the browser. However, cookies scoped to a parent-level domain may be transmitted to the parent, or any subdomain of the parent."},"155":{"alertType":"Active","alertOtherInfo":"Based on the successful response status code <a href=\"https:\/\/www.google.com\/search?q=cloud metadata\" target=\"blank\">cloud metadata<\/a> may have been returned in the response. Check the response data to see if any cloud metadata has been returned. The meta data returned can include information that would allow an attacker to completely compromise the system.","alertName":"Cloud Metadata Potentially Exposed","alertSolution":"Do not trust any user data in <a href=\"https:\/\/www.google.com\/search?q=NGINX configs\" target=\"blank\">NGINX configs<\/a>. In this case it is probably the use of the <a href=\"https:\/\/www.google.com\/search?q=$host variable nginx\" target=\"blank\">$host variable<\/a> which is set from the 'Host' header and can be controlled by an attacker.","alertReferences":["https:\/\/www.nginx.com\/blog\/trust-no-one-perils-of-trusting-user-input\/"],"alertTechTargeted":"All","alertCWEID":"N\/A","alertID":"90034","alertWASCID":"N\/A","alertRisk":"High","alertSummary":"The <a href=\"https:\/\/www.google.com\/search?q=Cloud Metadata Attack\" target=\"blank\">Cloud Metadata Attack<\/a> attempts to abuse a misconfigured <a href=\"https:\/\/www.google.com\/search?q=NGINX server\" target=\"blank\">NGINX server<\/a> in order to access the instance metadata maintained by cloud service providers such as <a href=\"https:\/\/www.google.com\/search?q=AWS\" target=\"blank\">AWS<\/a>, <a href=\"https:\/\/www.google.com\/search?q=GCP\" target=\"blank\">GCP<\/a> and <a href=\"https:\/\/www.google.com\/search?q=Azure\" target=\"blank\">Azure<\/a>.\nAll of these providers provide metadata via an internal unroutable IP address \u2018169.254.169.254\u2019 - this can be exposed by incorrectly configured NGINX servers and accessed by using this IP address in the Host header field."},"156":{"alertType":"Active","alertOtherInfo":"N\/A","alertName":"Server Side Template Injection","alertSolution":"Instead of inserting the user input in the template, use it as rendering argument.","alertReferences":["https:\/\/portswigger.net\/blog\/server-side-template-injection"],"alertTechTargeted":"All","alertCWEID":"94","alertID":"90035","alertWASCID":"20","alertRisk":"High","alertSummary":"When the user input is inserted in the template instead of being used as argument in rendering is evaluated by the <a href=\"https:\/\/www.google.com\/search?q=template engine cyber\" target=\"blank\">template engine<\/a>. Depending on the template engine it can lead to <a href=\"https:\/\/www.google.com\/search?q=remote code execution\" target=\"blank\">remote code execution<\/a>."},"157":{"alertType":"Active","alertOtherInfo":"N\/A","alertName":"Server Side Template Injection (Blind)","alertSolution":"Instead of inserting the user input in the template, use it as rendering argument.","alertReferences":["https:\/\/portswigger.net\/blog\/server-side-template-injection"],"alertTechTargeted":"All","alertCWEID":"74","alertID":"90036","alertWASCID":"20","alertRisk":"High","alertSummary":"When the user input is inserted in the template instead of being used as argument in rendering is evaluated by the <a href=\"https:\/\/www.google.com\/search?q=template engine webdev\" target=\"blank\">template engine<\/a>. Depending on the template engine it can lead to <a href=\"https:\/\/www.google.com\/search?q=remote code execution\" target=\"blank\">remote code execution<\/a>."},"158":{"alertType":"Passive","alertOtherInfo":"N\/A","alertName":"Application Error Disclosure via WebSockets","alertSolution":"Review the error payloads which are piped directly to <a href=\"https:\/\/www.google.com\/search?q=WebSockets\" target=\"blank\">WebSockets<\/a>. Handle the related exceptions. Consider implementing a mechanism to provide a unique error reference\/identifier to the client (browser) while logging the details on the server side and not exposing them to the user.","alertReferences":"N\/A","alertTechTargeted":"All","alertCWEID":"209","alertID":"110001","alertWASCID":"13","alertRisk":"Medium","alertSummary":"This payload contains an error\/warning message that may disclose sensitive information like the location of the file that produced the unhandled exception. This information can be used to launch further attacks against the web application."},"159":{"alertType":"Passive","alertOtherInfo":"N\/A","alertName":"Base64 Disclosure in WebSocket message","alertSolution":"<a href=\"https:\/\/www.google.com\/search?q=Base64-encoding\" target=\"blank\">Base64-encoding<\/a> should not be used to store or send sensitive information.","alertReferences":"N\/A","alertTechTargeted":"All","alertCWEID":"N\/A","alertID":"110002","alertWASCID":"N\/A","alertRisk":"Informational","alertSummary":"A <a href=\"https:\/\/www.google.com\/search?q=Base64-encoded string\" target=\"blank\">Base64-encoded string<\/a> has been found in the <a href=\"https:\/\/www.google.com\/search?q=websocket\" target=\"blank\">websocket<\/a> incoming message. Base64-encoded data may contain sensitive information such as usernames, passwords or cookies which should be further inspected. Decoded evidence: example."},"50":{"alertType":"Passive","alertOtherInfo":"N\/A","alertName":"Strict-Transport-Security Defined via META (Non-compliant with Spec)","alertSolution":"Do not attempt to set <a href=\"https:\/\/www.google.com\/search?q=HTTP Strict Transport Security\" target=\"blank\">HTTP Strict Transport Security<\/a> (HSTS) via a META tag.","alertReferences":["https:\/\/datatracker.ietf.org\/doc\/html\/rfc6797#section-8.5"],"alertTechTargeted":"All","alertCWEID":"319","alertID":"10035-6","alertWASCID":"15","alertRisk":"Low","alertSummary":"A <a href=\"https:\/\/www.google.com\/search?q=HTTP Strict Transport Security\" target=\"blank\">HTTP Strict Transport Security<\/a> (HSTS) META tag was found, defining HTTP Strict Transport Security (HSTS) via a META tag is explicitly not supported by the spec (RFC 6797)."},"51":{"alertType":"Passive","alertOtherInfo":"N\/A","alertName":"Strict-Transport-Security Max-Age Malformed (Non-compliant with Spec)","alertSolution":"Review the configuration of this control. Ensure that your web server, application server, <a href=\"https:\/\/www.google.com\/search?q=load balancer\" target=\"blank\">load balancer<\/a>, etc. is configured to set <a href=\"https:\/\/www.google.com\/search?q=Strict-Transport-Security\" target=\"blank\">Strict-Transport-Security<\/a> with an appropriate format.","alertReferences":["https:\/\/datatracker.ietf.org\/doc\/html\/rfc6797#section-6.1"],"alertTechTargeted":"All","alertCWEID":"319","alertID":"10035-7","alertWASCID":"15","alertRisk":"Low","alertSummary":"A <a href=\"https:\/\/www.google.com\/search?q=HTTP Strict Transport Security\" target=\"blank\">HTTP Strict Transport Security<\/a> (HSTS) header was found, but it contains quotes preceding the max-age directive (the max-age value can be quoted, but the directive itself cannot be). See RFC 6797 for further details.\nHTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over <a href=\"https:\/\/www.google.com\/search?q=TLS\/SSL\" target=\"blank\">TLS\/SSL<\/a>)."},"52":{"alertType":"Passive","alertOtherInfo":"N\/A","alertName":"Strict-Transport-Security Malformed Content (Non-compliant with Spec)","alertSolution":"Review the configuration of this control. Ensure that your web server, application server, <a href=\"https:\/\/www.google.com\/search?q=load balancer\" target=\"blank\">load balancer<\/a>, etc. is configured to set <a href=\"https:\/\/www.google.com\/search?q=Strict-Transport-Security\" target=\"blank\">Strict-Transport-Security<\/a> with appropriate content.","alertReferences":["https:\/\/datatracker.ietf.org\/doc\/html\/rfc6797"],"alertTechTargeted":"All","alertCWEID":"319","alertID":"10035-8","alertWASCID":"15","alertRisk":"Low","alertSummary":"A <a href=\"https:\/\/www.google.com\/search?q=HTTP Strict Transport Security\" target=\"blank\">HTTP Strict Transport Security<\/a> (HSTS) header was found, but it contains some content that was not expected (perhaps curly quotes), the expectation is that the content be printable ASCII characters."},"53":{"alertType":"Passive","alertOtherInfo":"N\/A","alertName":"HTTP Server Response Header","alertSolution":"N\/A","alertReferences":"N\/A","alertTechTargeted":"N\/A","alertCWEID":"N\/A","alertID":"10036","alertWASCID":"N\/A","alertRisk":"N\/A","alertSummary":"See child errors."},"54":{"alertType":"Passive","alertOtherInfo":"N\/A","alertName":"Server Leaks its Webserver Application via \"Server\" HTTP Response Header Field","alertSolution":"Ensure that your web server, application server, <a href=\"https:\/\/www.google.com\/search?q=load balancer\" target=\"blank\">load balancer<\/a>, etc. is configured to suppress the \"Server\" header or provide generic details.","alertReferences":["https:\/\/httpd.apache.org\/docs\/current\/mod\/core.html#servertokens","https:\/\/learn.microsoft.com\/en-us\/previous-versions\/msp-n-p\/ff648552(v=pandp.10)","https:\/\/www.troyhunt.com\/shhh-dont-let-your-response-headers\/"],"alertTechTargeted":"All","alertCWEID":"200","alertID":"10036-1","alertWASCID":"13","alertRisk":"Informational","alertSummary":"The web\/application server is leaking the application it uses as a webserver via the \u201CServer\u201D HTTP response header. Access to such information may facilitate attackers identifying other vulnerabilities your web\/application server is subject to. This information alone, i.e. without a version string, is not very dangerous for the security of a server, nevertheless this information in the response header field is almost always useless and thus just an obsolete attacking vector."},"55":{"alertType":"Passive","alertOtherInfo":"N\/A","alertName":"Server Leaks Version Information via \"Server\" HTTP Response Header Field","alertSolution":"Ensure that your web server, application server, <a href=\"https:\/\/www.google.com\/search?q=load balancer\" target=\"blank\">load balancer<\/a>, etc. is configured to suppress the \"Server\" header or provide generic details.","alertReferences":["https:\/\/httpd.apache.org\/docs\/current\/mod\/core.html#servertokens","https:\/\/learn.microsoft.com\/en-us\/previous-versions\/msp-n-p\/ff648552(v=pandp.10)","https:\/\/www.troyhunt.com\/shhh-dont-let-your-response-headers\/"],"alertTechTargeted":"All","alertCWEID":"200","alertID":"10036-2","alertWASCID":"13","alertRisk":"Low","alertSummary":"The web\/application server is leaking version information via the \u201CServer\u201D HTTP response header. Access to such information may facilitate attackers identifying other vulnerabilities your web\/application server is subject to."},"56":{"alertType":"Passive","alertOtherInfo":"N\/A","alertName":"Server Leaks Information via \"X-Powered-By\" HTTP Response Header Field(s)","alertSolution":"Ensure that your web server, application server, <a href=\"https:\/\/www.google.com\/search?q=load balancer\" target=\"blank\">load balancer<\/a>, etc. is configured to suppress <a href=\"https:\/\/www.google.com\/search?q=\"X-Powered-By\" headers\" target=\"blank\">\"X-Powered-By\" headers<\/a>.","alertReferences":["https:\/\/owasp.org\/www-project-web-security-testing-guide\/v42\/4-Web_Application_Security_Testing\/01-Information_Gathering\/08-Fingerprint_Web_Application_Framework","https:\/\/www.troyhunt.com\/2012\/02\/shhh-dont-let-your-response-headers.html"],"alertTechTargeted":"All","alertCWEID":"200","alertID":"10037","alertWASCID":"13","alertRisk":"Low","alertSummary":"The web\/application server is leaking information via one or more <a href=\"https:\/\/www.google.com\/search?q=\u201CX-Powered-By\u201D HTTP response headers\" target=\"blank\">\u201CX-Powered-By\u201D HTTP response headers<\/a>. Access to such information may facilitate attackers identifying other frameworks\/components your web application is reliant upon and the vulnerabilities such components may be subject to."},"57":{"alertType":"Passive","alertOtherInfo":"N\/A","alertName":"Content Security Policy (CSP) Header Not Set","alertSolution":"N\/A","alertReferences":"N\/A","alertTechTargeted":"N\/A","alertCWEID":"N\/A","alertID":"10038","alertWASCID":"N\/A","alertRisk":"N\/A","alertSummary":"See child errors."},"58":{"alertType":"Passive","alertOtherInfo":"N\/A","alertName":"Content Security Policy (CSP) Header Not Set","alertSolution":"Ensure that your web server, application server, <a href=\"https:\/\/www.google.com\/search?q=load balancer\" target=\"blank\">load balancer<\/a>, etc. is configured to set the <a href=\"https:\/\/www.google.com\/search?q=Content-Security-Policy\" target=\"blank\">Content-Security-Policy<\/a> header.","alertReferences":["https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/Security\/CSP\/Introducing_Content_Security_Policy","https:\/\/cheatsheetseries.owasp.org\/cheatsheets\/Content_Security_Policy_Cheat_Sheet.html","https:\/\/www.w3.org\/TR\/CSP\/","https:\/\/w3c.github.io\/webappsec-csp\/","https:\/\/web.dev\/articles\/csp","https:\/\/caniuse.com\/#feat=contentsecuritypolicy","https:\/\/content-security-policy.com\/"],"alertTechTargeted":"All","alertCWEID":"693","alertID":"10038-1","alertWASCID":"15","alertRisk":"Medium","alertSummary":"<a href=\"https:\/\/www.google.com\/search?q=Content Security Policy\" target=\"blank\">Content Security Policy<\/a> (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including <a href=\"https:\/\/www.google.com\/search?q=Cross Site Scripting\" target=\"blank\">Cross Site Scripting<\/a> (XSS) and <a href=\"https:\/\/www.google.com\/search?q=data injection\" target=\"blank\">data injection<\/a> attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files."},"59":{"alertType":"Passive","alertOtherInfo":"N\/A","alertName":"Obsolete Content Security Policy (CSP) Header Found","alertSolution":"Ensure that your web server, application server, <a href=\"https:\/\/www.google.com\/search?q=load balancer\" target=\"blank\">load balancer<\/a>, etc. is configured to set the <a href=\"https:\/\/www.google.com\/search?q=Content-Security-Policy\" target=\"blank\">Content-Security-Policy<\/a> header.","alertReferences":["https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/Security\/CSP\/Introducing_Content_Security_Policy","https:\/\/cheatsheetseries.owasp.org\/cheatsheets\/Content_Security_Policy_Cheat_Sheet.html","https:\/\/www.w3.org\/TR\/CSP\/","https:\/\/w3c.github.io\/webappsec-csp\/","https:\/\/web.dev\/articles\/csp","https:\/\/caniuse.com\/#feat=contentsecuritypolicy","https:\/\/content-security-policy.com\/"],"alertTechTargeted":"All","alertCWEID":"693","alertID":"10038-2","alertWASCID":"15","alertRisk":"Informational","alertSummary":"The \u201C<a href=\"https:\/\/www.google.com\/search?q=X-Content-Security-Policy\" target=\"blank\">X-Content-Security-Policy<\/a>\u201D and \u201C<a href=\"https:\/\/www.google.com\/search?q=X-WebKit-CSP\" target=\"blank\">X-WebKit-CSP<\/a>\u201D headers are no longer recommended."},"160":{"alertType":"Passive","alertOtherInfo":"N\/A","alertName":"Information Disclosure - Debug Error Messages via WebSocket","alertSolution":"Disable debugging messages before pushing to production.","alertReferences":"N\/A","alertTechTargeted":"All","alertCWEID":"200","alertID":"110003","alertWASCID":"13","alertRisk":"Low","alertSummary":"The response appeared to contain common error messages returned by platforms such as <a href=\"https:\/\/www.google.com\/search?q=ASP.NET\" target=\"blank\">ASP.NET<\/a>, and Web-servers such as <a href=\"https:\/\/www.google.com\/search?q=IIS\" target=\"blank\">IIS<\/a> and <a href=\"https:\/\/www.google.com\/search?q=Apache\" target=\"blank\">Apache<\/a>. You can configure the list of common debug messages."},"161":{"alertType":"Passive","alertOtherInfo":"N\/A","alertName":"Email address found in WebSocket message","alertSolution":"Remove emails that are not public.","alertReferences":"N\/A","alertTechTargeted":"All","alertCWEID":"200","alertID":"110004","alertWASCID":"13","alertRisk":"Informational","alertSummary":"An email address was found in a <a href=\"https:\/\/www.google.com\/search?q=WebSocket Message\" target=\"blank\">WebSocket Message<\/a>."},"162":{"alertType":"Passive","alertOtherInfo":"N\/A","alertName":"Personally Identifiable Information via WebSocket","alertSolution":"Solution","alertReferences":"N\/A","alertTechTargeted":"All","alertCWEID":"359","alertID":"110005","alertWASCID":"13","alertRisk":"High","alertSummary":"The response contains Personally Identifiable Information, such as CC number. Credit Card type detected: undefined."},"163":{"alertType":"Passive","alertOtherInfo":"N\/A","alertName":"Private IP Disclosure via WebSocket","alertSolution":"Remove the private IP address from the <a href=\"https:\/\/www.google.com\/search?q=WebSocket messages\" target=\"blank\">WebSocket messages<\/a>.","alertReferences":["https:\/\/tools.ietf.org\/html\/rfc1918"],"alertTechTargeted":"All","alertCWEID":"N\/A","alertID":"110006","alertWASCID":"N\/A","alertRisk":"Low","alertSummary":"A private IP (such as 10.x.x.x, 172.x.x.x, 192.168.x.x) or an <a href=\"https:\/\/www.google.com\/search?q=Amazon EC2 private hostname\" target=\"blank\">Amazon EC2 private hostname<\/a> (for example, ip-10-0-56-78) has been found in the incoming <a href=\"https:\/\/www.google.com\/search?q=WebSocket message\" target=\"blank\">WebSocket message<\/a>. This information might be helpful for further attacks targeting internal systems."},"164":{"alertType":"Passive","alertOtherInfo":"N\/A","alertName":"Username Hash Found in WebSocket message","alertSolution":"Use per user or <a href=\"https:\/\/www.google.com\/search?q=session indirect object references\" target=\"blank\">session indirect object references<\/a> (create a temporary mapping at time of use). Or, ensure that each use of a direct object reference is tied to an authorization check to ensure the user is authorized for the requested object.","alertReferences":["https:\/\/cheatsheetseries.owasp.org\/cheatsheets\/Insecure_Direct_Object_Reference_Prevention_Cheat_Sheet.html","https:\/\/owasp.org\/www-project-web-security-testing-guide\/v42\/4-Web_Application_Security_Testing\/05-Authorization_Testing\/04-Testing_for_Insecure_Direct_Object_References"],"alertTechTargeted":"All","alertCWEID":"284","alertID":"110007","alertWASCID":"2","alertRisk":"Informational","alertSummary":"A Example <a href=\"https:\/\/www.google.com\/search?q=hash cyber\" target=\"blank\">hash<\/a> of {Example \/ context: Example} was found in incoming <a href=\"https:\/\/www.google.com\/search?q=WebSocket message\" target=\"blank\">WebSocket message<\/a>. This may indicate that the application is subject to an <a href=\"https:\/\/www.google.com\/search?q=Insecure Direct Object Reference (IDOR) vulnerability\" target=\"blank\">Insecure Direct Object Reference (IDOR) vulnerability<\/a>. Manual testing will be required to see if this discovery can be abused."},"165":{"alertType":"Passive","alertOtherInfo":"N\/A","alertName":"Information Disclosure - Suspicious Comments in XML via WebSocket","alertSolution":"Remove all comments that return information that may help an attacker and fix any underlying problems they refer to.","alertReferences":"N\/A","alertTechTargeted":"All","alertCWEID":"200","alertID":"110008","alertWASCID":"13","alertRisk":"Informational","alertSummary":"The response appears to contain suspicious comments which may help an attacker."},"60":{"alertType":"Passive","alertOtherInfo":"N\/A","alertName":"Content Security Policy (CSP) Report-Only Header Found","alertSolution":"Ensure that your web server, application server, <a href=\"https:\/\/www.google.com\/search?q=load balancer\" target=\"blank\">load balancer<\/a>, etc. is configured to set the <a href=\"https:\/\/www.google.com\/search?q=Content-Security-Policy\" target=\"blank\">Content-Security-Policy<\/a> header.","alertReferences":["https:\/\/www.w3.org\/TR\/CSP2\/","https:\/\/w3c.github.io\/webappsec-csp\/","https:\/\/caniuse.com\/#feat=contentsecuritypolicy","https:\/\/content-security-policy.com\/"],"alertTechTargeted":"All","alertCWEID":"693","alertID":"10038-3","alertWASCID":"15","alertRisk":"Informational","alertSummary":"The response contained a <a href=\"https:\/\/www.google.com\/search?q=Content-Security-Policy-Report-Only\" target=\"blank\">Content-Security-Policy-Report-Only<\/a> header, this may indicate a work-in-progress implementation, or an oversight in promoting pre-Prod to Prod, etc."},"61":{"alertType":"Passive","alertOtherInfo":"N\/A","alertName":"X-Backend-Server Header Information Leak","alertSolution":"Ensure that your web server, application server, <a href=\"https://www.google.com/search?q=load balancer\" target=\"blank\">load balancer</a>, etc. is configured to suppress <a href=\"https:\/\/www.google.com\/search?q=X-Backend-Server\" target=\"blank\">X-Backend-Server<\/a> headers.","alertReferences":"N\/A","alertTechTargeted":"All","alertCWEID":"200","alertID":"10039","alertWASCID":"13","alertRisk":"Low","alertSummary":"The server is leaking information pertaining to backend systems (such as hostnames or IP addresses). Armed with this information an attacker may be able to attack other systems or more directly\/efficiently attack those systems."},"62":{"alertType":"Passive","alertOtherInfo":"tag=img src=http:\/\/example.com\/file","alertName":"Secure Pages Include Mixed Content","alertSolution":"A page that is available over <a href=\"https:\/\/www.google.com\/search?q=SSL\/TLS\" target=\"blank\">SSL\/TLS<\/a> must be comprised completely of content which is transmitted over SSL\/TLS. The page must not contain any content that is transmitted over unencrypted HTTP.  This includes content from third party sites.","alertReferences":["https:\/\/cheatsheetseries.owasp.org\/cheatsheets\/Transport_Layer_Protection_Cheat_Sheet.html"],"alertTechTargeted":"All","alertCWEID":"311","alertID":"10040","alertWASCID":"4","alertRisk":"Low","alertSummary":"The page includes mixed content, that is content accessed via HTTP instead of HTTPS."},"63":{"alertType":"Passive","alertOtherInfo":"The response to the following request over HTTP included an HTTPS form tag action attribute value:  http:\/\/example.com The context was:  <form name=\"someform\" action=\"https:\/\/example.com\/processform\">","alertName":"HTTP to HTTPS Insecure Transition in Form Post","alertSolution":"Use HTTPS for landing pages that host secure forms.","alertReferences":"N\/A","alertTechTargeted":"All","alertCWEID":"319","alertID":"10041","alertWASCID":"15","alertRisk":"Medium","alertSummary":"This check looks for insecure HTTP pages that host HTTPS forms. The issue is that an insecure HTTP page can easily be hijacked through <a href=\"https:\/\/www.google.com\/search?q=MITM\" target=\"blank\">MITM<\/a> and the secure HTTPS form can be replaced or spoofed."},"64":{"alertType":"Passive","alertOtherInfo":"The response to the following request over HTTPS included an HTTP form tag action attribute value:  https:\/\/example.com The context was:  <form name=\"someform\" action=\"http:\/\/example.com\/processform\">","alertName":"HTTPS to HTTP Insecure Transition in Form Post","alertSolution":"Ensure sensitive data is only sent over secured HTTPS channels.","alertReferences":"N\/A","alertTechTargeted":"All","alertCWEID":"319","alertID":"10042","alertWASCID":"15","alertRisk":"Medium","alertSummary":"This check identifies secure HTTPS pages that host <a href=\"https:\/\/www.google.com\/search?q=insecure HTTP forms\" target=\"blank\">insecure HTTP forms<\/a>. The issue is that a secure page is transitioning to an insecure page when data is uploaded through a form. The user may think they\u2019re submitting data to a secure page when in fact they are not."},"65":{"alertType":"Passive","alertOtherInfo":"User-controlled javascript event(s) was found. Exploitability will need to be manually determined. The page at the following URL:  http:\/\/example.com\/i.php?place=moon&name=Foo  includes the following Javascript event which may be attacker-controllable:   User-input was found in the following data of an [onerror] event: foo  The user input was: foo","alertName":"User Controllable JavaScript Event (XSS)","alertSolution":"Validate all input and sanitize output it before writing to any <a href=\"https:\/\/www.google.com\/search?q=Javascript on* events\" target=\"blank\">Javascript on* events<\/a>.","alertReferences":["https:\/\/cheatsheetseries.owasp.org\/cheatsheets\/Input_Validation_Cheat_Sheet.html"],"alertTechTargeted":"All","alertCWEID":"20","alertID":"10043","alertWASCID":"20","alertRisk":"Informational","alertSummary":"This check looks at user-supplied input in query string parameters and <a href=\"https:\/\/www.google.com\/search?q=POST data web development\" target=\"blank\">POST data<\/a> to identify where certain HTML attribute values might be controlled. This provides hot-spot detection for <a href=\"https:\/\/www.google.com\/search?q=XSS\" target=\"blank\">XSS<\/a> (cross-site scripting) that will require further review by a security analyst to determine exploitability."},"66":{"alertType":"Passive","alertOtherInfo":"N\/A","alertName":"Big Redirect Detected (Potential Sensitive Information Leak)","alertSolution":"N\/A","alertReferences":"N\/A","alertTechTargeted":"N\/A","alertCWEID":"N\/A","alertID":"10044","alertWASCID":"N\/A","alertRisk":"N\/A","alertSummary":"See child errors."},"67":{"alertType":"Passive","alertOtherInfo":"Location header URI length: 18 [http:\/\/example.com]. Predicted response size: 318. Response Body Length: 319.","alertName":"Big Redirect Detected (Potential Sensitive Information Leak)","alertSolution":"Ensure that no sensitive information is leaked via redirect responses. Redirect responses should have almost no content.","alertReferences":"N\/A","alertTechTargeted":"All","alertCWEID":"201","alertID":"10044-1","alertWASCID":"13","alertRisk":"Low","alertSummary":"The server has responded with a redirect that seems to provide a large response. This may indicate that although the server sent a redirect it also responded with body content (which may include sensitive details, <a href=\"https:\/\/www.google.com\/search?q=PII\" target=\"blank\">PII<\/a>, etc.)."},"68":{"alertType":"Passive","alertOtherInfo":"The response contained 3 occurrences of \"HREF\".","alertName":"Multiple HREFs Redirect Detected (Potential Sensitive Information Leak)","alertSolution":"Ensure that no sensitive information is leaked via redirect responses. Redirect responses should have almost no content.","alertReferences":"N\/A","alertTechTargeted":"All","alertCWEID":"201","alertID":"10044-2","alertWASCID":"13","alertRisk":"Low","alertSummary":"The server has responded with a redirect that seems to contain multiple links. This may indicate that although the server sent a redirect it also responded with body content links (which may include sensitive details, <a href=\"https:\/\/www.google.com\/search?q=PII\" target=\"blank\">PII<\/a>, lead to admin panels, etc.)."},"69":{"alertType":"Active","alertOtherInfo":"N\/A","alertName":"Source Code Disclosure - \/WEB-INF Folder","alertSolution":"N\/A","alertReferences":"N\/A","alertTechTargeted":"N\/A","alertCWEID":"N\/A","alertID":"10045","alertWASCID":"N\/A","alertRisk":"N\/A","alertSummary":"See child errors."},"70":{"alertType":"Active","alertOtherInfo":"class A { }","alertName":"Source Code Disclosure - \/WEB-INF Folder","alertSolution":"The web server should be configured to not serve the <a href=\"https:\/\/www.google.com\/search?q=\/WEB-INF folder\" target=\"blank\">\/WEB-INF folder<\/a> or its contents to web browsers, since it contains sensitive information such as compiled Java source code and properties files which may contain credentials. Java classes deployed with the application should be <a href=\"https:\/\/www.google.com\/search?q=obfuscated\" target=\"blank\">obfuscated<\/a>, as an additional layer of defence in a \"<a href=\"https:\/\/www.google.com\/search?q=defence-in-depth\" target=\"blank\">defence-in-depth<\/a>\" approach.","alertReferences":["https:\/\/owasp.org\/www-community\/attacks\/Forced_browsing","https:\/\/cwe.mitre.org\/data\/definitions\/425.html"],"alertTechTargeted":"All","alertCWEID":"541","alertID":"10045-1","alertWASCID":"34","alertRisk":"High","alertSummary":"Java source code was disclosed by the web server in Java class files in the <a href=\"https:\/\/www.google.com\/search?q=WEB-INF\" target=\"blank\">WEB-INF<\/a> folder. The class files can be dis-assembled to produce source code which very closely matches the original source code."},"71":{"alertType":"Active","alertOtherInfo":"The reference to the properties file was found in the dis-assembled Java source code for Java class [https:\/\/example.com\/foo.class].","alertName":"Properties File Disclosure - \/WEB-INF folder","alertSolution":"The web server should be configured to not serve the <a href=\"https:\/\/www.google.com\/search?q=\/WEB-INF folder\" target=\"blank\">\/WEB-INF folder<\/a> or its contents to web browsers.  It may also be possible to remove the \/WEB-INF folder.","alertReferences":["https:\/\/owasp.org\/www-community\/attacks\/Forced_browsing","https:\/\/cwe.mitre.org\/data\/definitions\/425.html"],"alertTechTargeted":"All","alertCWEID":"541","alertID":"10045-2","alertWASCID":"34","alertRisk":"High","alertSummary":"A Java class in the <a href=\"https:\/\/www.google.com\/search?q=\/WEB-INF\" target=\"blank\">\/WEB-INF<\/a> folder disclosed the presence of the properties file. Properties file are not intended to be publicly accessible, and typically contain configuration information, application credentials, or <a href=\"https:\/\/www.google.com\/search?q=cryptographic keys\" target=\"blank\">cryptographic keys<\/a>."},"72":{"alertType":"Passive","alertOtherInfo":"N\/A","alertName":"Retrieved from Cache","alertSolution":"N\/A","alertReferences":"N\/A","alertTechTargeted":"N\/A","alertCWEID":"N\/A","alertID":"10050","alertWASCID":"N\/A","alertRisk":"N\/A","alertSummary":"See child errors."},"73":{"alertType":"Passive","alertOtherInfo":"N\/A","alertName":"Retrieved from Cache","alertSolution":"Validate that the response does not contain sensitive, personal or user-specific information.  If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user: Cache-Control: no-cache, no-store, must-revalidate, private Pragma: no-cache Expires: 0 This configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.","alertReferences":["https:\/\/tools.ietf.org\/html\/rfc7234","https:\/\/tools.ietf.org\/html\/rfc7231","https:\/\/www.rfc-editor.org\/rfc\/rfc9110.html"],"alertTechTargeted":"All","alertCWEID":"N\/A","alertID":"10050-1","alertWASCID":"N\/A","alertRisk":"Informational","alertSummary":"The content was retrieved from a <a href=\"https:\/\/www.google.com\/search?q=shared cache\" target=\"blank\">shared cache<\/a>. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as \u201Cproxy\u201D caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance."},"74":{"alertType":"Passive","alertOtherInfo":"The presence of the 'Age' header indicates that that a HTTP\/1.1 compliant caching server is in use.","alertName":"Retrieved from Cache","alertSolution":"Validate that the response does not contain sensitive, personal or user-specific information.  If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user: Cache-Control: no-cache, no-store, must-revalidate, private Pragma: no-cache Expires: 0 This configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.","alertReferences":["https:\/\/tools.ietf.org\/html\/rfc7234","https:\/\/tools.ietf.org\/html\/rfc7231","https:\/\/www.rfc-editor.org\/rfc\/rfc9110.html"],"alertTechTargeted":"All","alertCWEID":"N\/A","alertID":"10050-2","alertWASCID":"N\/A","alertRisk":"Informational","alertSummary":"The content was retrieved from a <a href=\"https:\/\/www.google.com\/search?q=shared cache\" target=\"blank\">shared cache<\/a>. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as \u201Cproxy\u201D caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance."},"75":{"alertType":"Passive","alertOtherInfo":"The following represents an attempt to <a href=\"https:\/\/www.google.com\/search?q=base64\" target=\"blank\">base64<\/a> decode the value: {\"version\":\"4.0\",\"columns\":[\"label\",\"log\",\"backtrace\",\"type\"],\"rows\":[[\"request\",\"Matched route \\\"app_security_login\\\" (parameters: \\\"_controller\\\": \\\"BackEnd\\\\AppBundle\\\\Controller\\\\SecurityController::loginAction\\\", \\\"_route\\\": \\\"app_security_login\\\")\",\"unknown\",\"info\"],[\"security\",\"Populated SecurityContext with an anonymous Token\",\"unknown\",\"info\"]],\"request_uri\":\"\\\/login\"}","alertName":"X-ChromeLogger-Data (XCOLD) Header Information Leak","alertSolution":"Disable this functionality in Production when it might leak information that could be leveraged by an attacker. Alternatively ensure that use of the functionality is tied to a strong authorization check and only available to administrators or support personnel for troubleshooting purposes not general users.","alertReferences":["https:\/\/craig.is\/writing\/chrome-logger"],"alertTechTargeted":"All","alertCWEID":"200","alertID":"10052","alertWASCID":"13","alertRisk":"Medium","alertSummary":"The server is leaking information through the <a href=\"https:\/\/www.google.com\/search?q=X-ChromeLogger-Data\" target=\"blank\">X-ChromeLogger-Data<\/a> (or <a href=\"https:\/\/www.google.com\/search?q=X-ChromePhp-Data\" target=\"blank\">X-ChromePhp-Data<\/a>) response header. The content of such headers can be customized by the developer, however it is not uncommon to find: server file system locations, <a href=\"https:\/\/www.google.com\/search?q=vhost declarations\" target=\"blank\">vhost declarations<\/a>, etc."},"76":{"alertType":"Passive","alertOtherInfo":"N\/A","alertName":"Cookie without SameSite Attribute","alertSolution":"N\/A","alertReferences":"N\/A","alertTechTargeted":"N\/A","alertCWEID":"N\/A","alertID":"10054","alertWASCID":"N\/A","alertRisk":"N\/A","alertSummary":"See child errors."},"77":{"alertType":"Passive","alertOtherInfo":"N\/A","alertName":"Cookie without SameSite Attribute","alertSolution":"Ensure that the <a href=\"https:\/\/www.google.com\/search?q=SameSite attribute\" target=\"blank\">SameSite attribute<\/a> is set to either 'lax' or ideally 'strict' for all cookies.","alertReferences":["https:\/\/tools.ietf.org\/html\/draft-ietf-httpbis-cookie-same-site"],"alertTechTargeted":"All","alertCWEID":"1275","alertID":"10054-1","alertWASCID":"13","alertRisk":"Low","alertSummary":"A cookie has been set without the <a href=\"https:\/\/www.google.com\/search?q=SameSite attribute\" target=\"blank\">SameSite attribute<\/a>, which means that the cookie can be sent as a result of a \u2018cross-site\u2019 request. The SameSite attribute is an effective counter measure to cross-site request forgery, <a href=\"https:\/\/www.google.com\/search?q=cross-site script\" target=\"blank\">cross-site script<\/a> inclusion, and timing attacks."},"78":{"alertType":"Passive","alertOtherInfo":"N\/A","alertName":"Cookie with SameSite Attribute None","alertSolution":"Ensure that the <a href=\"https:\/\/www.google.com\/search?q=SameSite attribute\" target=\"blank\">SameSite attribute<\/a> is set to either 'lax' or ideally 'strict' for all cookies.","alertReferences":["https:\/\/tools.ietf.org\/html\/draft-ietf-httpbis-cookie-same-site"],"alertTechTargeted":"All","alertCWEID":"1275","alertID":"10054-2","alertWASCID":"13","alertRisk":"Low","alertSummary":"A cookie has been set with its <a href=\"https:\/\/www.google.com\/search?q=SameSite attribute\" target=\"blank\">SameSite attribute<\/a> set to \u201Cnone\u201D, which means that the cookie can be sent as a result of a \u2018cross-site\u2019 request. The SameSite attribute is an effective counter measure to cross-site request forgery, <a href=\"https:\/\/www.google.com\/search?q=cross-site script\" target=\"blank\">cross-site script<\/a> inclusion, and timing attacks."},"79":{"alertType":"Passive","alertOtherInfo":"N\/A","alertName":"Cookie with Invalid SameSite Attribute","alertSolution":"Ensure that the <a href=\"https:\/\/www.google.com\/search?q=SameSite attribute\" target=\"blank\">SameSite attribute<\/a> is set to either 'lax' or ideally 'strict' for all cookies.","alertReferences":["https:\/\/tools.ietf.org\/html\/draft-ietf-httpbis-cookie-same-site"],"alertTechTargeted":"All","alertCWEID":"1275","alertID":"10054-3","alertWASCID":"13","alertRisk":"Low","alertSummary":"A cookie has been set with an invalid <a href=\"https:\/\/www.google.com\/search?q=SameSite attribute\" target=\"blank\">SameSite attribute<\/a> value, which means that the cookie can be sent as a result of a \u2018cross-site\u2019 request. The SameSite attribute is an effective counter measure to <a href=\"https:\/\/www.google.com\/search?q=cross-site request forgery\" target=\"blank\">cross-site request forgery<\/a>, <a href=\"https:\/\/www.google.com\/search?q=cross-site script\" target=\"blank\">cross-site script<\/a> inclusion, and <a href=\"https:\/\/www.google.com\/search?q=timing attacks\" target=\"blank\">timing attacks<\/a>."},"100":{"alertType":"Passive","alertOtherInfo":"The <a href=\"https:\/\/www.google.com\/search?q=CORS misconfiguration\" target=\"blank\">CORS misconfiguration<\/a> on the web server permits cross-domain read requests from arbitrary third party domains, using unauthenticated <a href=\"https:\/\/www.google.com\/search?q=APIs\" target=\"blank\">APIs<\/a> on this domain. Web browser implementations do not permit arbitrary third parties to read the response from authenticated APIs, however. This reduces the risk somewhat. This misconfiguration could be used by an attacker to access data that is available in an unauthenticated manner, but which uses some other form of security, such as <a href=\"https:\/\/www.google.com\/search?q=IP address white-listing\" target=\"blank\">IP address white-listing<\/a>.","alertName":"Cross-Domain Misconfiguration","alertSolution":"Ensure that sensitive data is not available in an unauthenticated manner (using IP address white-listing, for instance). Configure the \"<a href=\"https:\/\/www.google.com\/search?q=Access-Control-Allow-Origin\" target=\"blank\">Access-Control-Allow-Origin<\/a>\" HTTP header to a more restrictive set of domains, or remove all <a href=\"https:\/\/www.google.com\/search?q=CORS headers\" target=\"blank\">CORS headers<\/a> entirely, to allow the web browser to enforce the <a href=\"https:\/\/www.google.com\/search?q=Same Origin Policy\" target=\"blank\">Same Origin Policy<\/a> (SOP) in a more restrictive manner.","alertReferences":["https:\/\/vulncat.fortify.com\/en\/detail?id=desc.config.dotnet.html5_overly_permissive_cors_policy"],"alertTechTargeted":"All","alertCWEID":"264","alertID":"10098","alertWASCID":"14","alertRisk":"Medium","alertSummary":"Web browser data loading may be possible, due to a <a href=\"https:\/\/www.google.com\/search?q=Cross Origin Resource Sharing\" target=\"blank\">Cross Origin Resource Sharing<\/a> (CORS) misconfiguration on the web server"},"101":{"alertType":"Active","alertOtherInfo":"N\/A","alertName":"User Agent Fuzzer","alertSolution":"Solution","alertReferences":["https:\/\/owasp.org\/wstg"],"alertTechTargeted":"All","alertCWEID":"N\/A","alertID":"10104","alertWASCID":"N\/A","alertRisk":"Informational","alertSummary":"Check for differences in response based on <a href=\"https:\/\/www.google.com\/search?q=fuzzed User Agent\" target=\"blank\">fuzzed User Agent<\/a> (eg. mobile sites, access as a Search Engine Crawler). Compares the response statuscode and the hashcode of the response body with the original response."},"102":{"alertType":"Passive","alertOtherInfo":"N\/A","alertName":"Weak Authentication Method","alertSolution":"N\/A","alertReferences":"N\/A","alertTechTargeted":"N\/A","alertCWEID":"N\/A","alertID":"10105","alertWASCID":"N\/A","alertRisk":"N\/A","alertSummary":"See child errors."},"103":{"alertType":"Passive","alertOtherInfo":"[POST] [http:\/\/www.example.com] uses insecure authentication mechanism [Digest], revealing username [admin] and additional information [username=\"admin\", realm=\"members only\"].","alertName":"Authentication Credentials Captured","alertSolution":"Use HTTPS, and use a secure authentication mechanism that does not transmit the userid or password in an un-encrypted fashion.  In particular, avoid use of the <a href=\"https:\/\/www.google.com\/search?q=Basic Authentication mechanism\" target=\"blank\">Basic Authentication mechanism<\/a>, since this trivial obfuscation mechanism is easily broken.","alertReferences":["https:\/\/owasp.org\/www-community\/attacks\/Brute_force_attack","https:\/\/en.wikipedia.org\/wiki\/Digest_access_authentication"],"alertTechTargeted":"All","alertCWEID":"287","alertID":"10105-1","alertWASCID":"1","alertRisk":"Medium","alertSummary":"An insecure authentication mechanism is in use. This allows an attacker on the network access to the userid and password of the authenticated user. For Basic Authentication, the attacker must merely monitor the network traffic until a Basic Authentication request is received, and then <a href=\"https:\/\/www.google.com\/search?q=base64\" target=\"blank\">base64<\/a> decode the username and password.  For <a href=\"https:\/\/www.google.com\/search?q=Digest Authentication\" target=\"blank\">Digest Authentication<\/a>, the attacker has access to the username, and possibly also the password, if the <a href=\"https:\/\/www.google.com\/search?q=hash cyber\" target=\"blank\">hash<\/a> (including a <a href=\"https:\/\/www.google.com\/search?q=nonce\" target=\"blank\">nonce<\/a>) can be successfully cracked, or if a <a href=\"https:\/\/www.google.com\/search?q=Man-In-The-Middle attack\" target=\"blank\">Man-In-The-Middle attack<\/a> is mounted.\nThe attacker eavesdrops on the network until an authentication has completed."},"104":{"alertType":"Passive","alertOtherInfo":"N\/A","alertName":"Weak Authentication Method","alertSolution":"Protect the connection using HTTPS or use a stronger authentication mechanism","alertReferences":["https:\/\/cheatsheetseries.owasp.org\/cheatsheets\/Authentication_Cheat_Sheet.html"],"alertTechTargeted":"All","alertCWEID":"326","alertID":"10105-2","alertWASCID":"4","alertRisk":"Medium","alertSummary":"HTTP basic or <a href=\"https:\/\/www.google.com\/search?q=digest authentication\" target=\"blank\">digest authentication<\/a> has been used over an unsecured connection. The credentials can be read and then reused by someone with access to the network."},"105":{"alertType":"Passive","alertOtherInfo":"N\/A","alertName":"Reverse Tabnabbing","alertSolution":"Do not use a target attribute, or if you have to then also add the attribute: rel=\"noopener noreferrer\".","alertReferences":["https:\/\/owasp.org\/www-community\/attacks\/Reverse_Tabnabbing","https:\/\/dev.to\/ben\/the-targetblank-vulnerability-by-example","https:\/\/mathiasbynens.github.io\/rel-noopener\/","https:\/\/medium.com\/@jitbit\/target-blank-the-most-underestimated-vulnerability-ever-96e328301f4c"],"alertTechTargeted":"All","alertCWEID":"N\/A","alertID":"10108","alertWASCID":"N\/A","alertRisk":"Medium","alertSummary":"At least one link on this page is vulnerable to <a href=\"https:\/\/www.google.com\/search?q=Reverse tabnabbing\" target=\"blank\">Reverse tabnabbing<\/a> as it uses a target attribute without using both of the \u201Cnoopener\u201D and \u201Cnoreferrer\u201D keywords in the \u201Crel\u201D attribute, which allows the target page to take control of this page."},"106":{"alertType":"Passive","alertOtherInfo":"Links have been found with a target of '_self' - this is often used by modern frameworks to force a full page reload.","alertName":"Modern Web Application","alertSolution":"This is an informational alert and so no changes are required.","alertReferences":"N\/A","alertTechTargeted":"All","alertCWEID":"N\/A","alertID":"10109","alertWASCID":"N\/A","alertRisk":"Informational","alertSummary":"The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one."},"80":{"alertType":"Passive","alertOtherInfo":"N\/A","alertName":"CSP","alertSolution":"N\/A","alertReferences":"N\/A","alertTechTargeted":"N\/A","alertCWEID":"N\/A","alertID":"10055","alertWASCID":"N\/A","alertRisk":"N\/A","alertSummary":"See child errors."},"107":{"alertType":"Passive","alertOtherInfo":"No known <a href=\"https:\/\/www.google.com\/search?q=Anti-CSRF token\" target=\"blank\">Anti-CSRF token<\/a> [token, csrfToken, csrf-token] was found in the following HTML form: [Form 1: \"name\" ].","alertName":"Absence of Anti-CSRF Tokens","alertSolution":"Phase: Architecture and Design Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid. For example, use <a href=\"https:\/\/www.google.com\/search?q=anti-CSRF\" target=\"blank\">anti-CSRF<\/a> packages such as the <a href=\"https:\/\/www.google.com\/search?q=OWASP CSRFGuard\" target=\"blank\">OWASP CSRFGuard<\/a>.  Phase: Implementation Ensure that your application is free of <a href=\"https:\/\/www.google.com\/search?q=cross-site scripting\" target=\"blank\">cross-site scripting<\/a> issues, because most CSRF defenses can be bypassed using attacker-controlled script.  Phase: Architecture and Design Generate a unique <a href=\"https:\/\/www.google.com\/search?q=nonce\" target=\"blank\">nonce<\/a> for each form, place the nonce into the form, and verify the nonce upon receipt of the form. Be sure that the nonce is not predictable (<a href=\"https:\/\/www.google.com\/search?q=CWE-330\" target=\"blank\">CWE-330<\/a>). Note that this can be bypassed using XSS.  Identify especially dangerous operations. When the user performs a dangerous operation, send a separate confirmation request to ensure that the user intended to perform that operation. Note that this can be bypassed using XSS.  Use the <a href=\"https:\/\/www.google.com\/search?q=ESAPI Session Management\" target=\"blank\">ESAPI Session Management<\/a> control. This control includes a component for CSRF.  Do not use the GET method for any request that triggers a state change.  Phase: Implementation Check the HTTP Referer header to see if the request originated from an expected page. This could break legitimate functionality, because users or proxies may have disabled sending the Referer for privacy reasons.","alertReferences":["https:\/\/cheatsheetseries.owasp.org\/cheatsheets\/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.html","https:\/\/cwe.mitre.org\/data\/definitions\/352.html"],"alertTechTargeted":"All","alertCWEID":"352","alertID":"10202","alertWASCID":"9","alertRisk":"Medium","alertSummary":"No <a href=\"https:\/\/www.google.com\/search?q=Anti-CSRF\" target=\"blank\">Anti-CSRF<\/a> tokens were found in a HTML submission form.\nA cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL\/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, <a href=\"https:\/\/www.google.com\/search?q=cross-site scripting\" target=\"blank\">cross-site scripting<\/a> (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf."},"81":{"alertType":"Passive","alertOtherInfo":"The header <a href=\"https:\/\/www.google.com\/search?q=X-Content-Security-Policy\" target=\"blank\">X-Content-Security-Policy<\/a> was found on this response. While it is a good sign that <a href=\"https:\/\/www.google.com\/search?q=CSP\" target=\"blank\">CSP<\/a> is implemented to some degree the policy specified in this header has not been analyzed by ZAP. To ensure full support by modern browsers ensure that the <a href=\"https:\/\/www.google.com\/search?q=Content-Security-Policy header\" target=\"blank\">Content-Security-Policy header<\/a> is defined and attached to responses.","alertName":"CSP: X-Content-Security-Policy","alertSolution":"Ensure that your web server, application server, <a href=\"https:\/\/www.google.com\/search?q=load balancer\" target=\"blank\">load balancer<\/a>, etc. is properly configured to set the <a href=\"https:\/\/www.google.com\/search?q=Content-Security-Policy\" target=\"blank\">Content-Security-Policy<\/a> header.","alertReferences":["https:\/\/www.w3.org\/TR\/CSP\/","https:\/\/caniuse.com\/#search=content+security+policy","https:\/\/content-security-policy.com\/","https:\/\/github.com\/HtmlUnit\/htmlunit-csp","https:\/\/developers.google.com\/web\/fundamentals\/security\/csp#policy_applies_to_a_wide_variety_of_resources"],"alertTechTargeted":"All","alertCWEID":"693","alertID":"10055-1","alertWASCID":"15","alertRisk":"Low","alertSummary":"<a href=\"https:\/\/www.google.com\/search?q=Content Security Policy\" target=\"blank\">Content Security Policy<\/a> (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks. Including (but not limited to) <a href=\"https:\/\/www.google.com\/search?q=Cross Site Scripting\" target=\"blank\">Cross Site Scripting<\/a> (XSS), and <a href=\"https:\/\/www.google.com\/search?q=data injection\" target=\"blank\">data injection<\/a> attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files."},"108":{"alertType":"Active","alertOtherInfo":"This issue was confirmed by exfiltrating data from the server, using <a href=\"https:\/\/www.google.com\/search?q=TLS 1.1\" target=\"blank\">TLS 1.1<\/a>. This is unlikely to be a false positive.","alertName":"Heartbleed OpenSSL Vulnerability","alertSolution":"Update to <a href=\"https:\/\/www.google.com\/search?q=OpenSSL 1.0.1g\" target=\"blank\">OpenSSL 1.0.1g<\/a> or later. Re-issue <a href=\"https:\/\/www.google.com\/search?q=HTTPS certificates\" target=\"blank\">HTTPS certificates<\/a>. Change <a href=\"https:\/\/www.google.com\/search?q=asymmetric private key\" target=\"blank\">asymmetric private key<\/a>s and <a href=\"https:\/\/www.google.com\/search?q=shared secret keys\" target=\"blank\">shared secret keys<\/a>, since these may have been compromised, with no evidence of compromise in the server log files.","alertReferences":["https:\/\/nvd.nist.gov\/vuln\/detail\/CVE-2014-0160"],"alertTechTargeted":"All","alertCWEID":"119","alertID":"20015","alertWASCID":"20","alertRisk":"High","alertSummary":"The TLS implementation in OpenSSL 1.0.1 before 1.0.1g does not properly handle <a href=\"https:\/\/www.google.com\/search?q=Heartbeat Extension packets\" target=\"blank\">Heartbeat Extension packets<\/a>, which allows remote attackers to obtain sensitive information from process memory via crafted packets that trigger a <a href=\"https:\/\/www.google.com\/search?q=buffer over-read\" target=\"blank\">buffer over-read<\/a>, potentially disclosing sensitive information."},"82":{"alertType":"Passive","alertOtherInfo":"The header <a href=\"https:\/\/www.google.com\/search?q=X-WebKit-CSP\" target=\"blank\">X-WebKit-CSP<\/a> was found on this response. While it is a good sign that <a href=\"https:\/\/www.google.com\/search?q=CSP\" target=\"blank\">CSP<\/a> is implemented to some degree the policy specified in this header has not been analyzed by ZAP. To ensure full support by modern browsers ensure that the <a href=\"https:\/\/www.google.com\/search?q=Content-Security-Policy header\" target=\"blank\">Content-Security-Policy header<\/a> is defined and attached to responses.","alertName":"CSP: X-WebKit-CSP","alertSolution":"Ensure that your web server, application server, <a href=\"https:\/\/www.google.com\/search?q=load balancer\" target=\"blank\">load balancer<\/a>, etc. is properly configured to set the <a href=\"https:\/\/www.google.com\/search?q=Content-Security-Policy\" target=\"blank\">Content-Security-Policy<\/a> header.","alertReferences":["https:\/\/www.w3.org\/TR\/CSP\/","https:\/\/caniuse.com\/#search=content+security+policy","https:\/\/content-security-policy.com\/","https:\/\/github.com\/HtmlUnit\/htmlunit-csp","https:\/\/developers.google.com\/web\/fundamentals\/security\/csp#policy_applies_to_a_wide_variety_of_resources"],"alertTechTargeted":"All","alertCWEID":"693","alertID":"10055-2","alertWASCID":"15","alertRisk":"Low","alertSummary":"<a href=\"https:\/\/www.google.com\/search?q=Content Security Policy\" target=\"blank\">Content Security Policy<\/a> (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks. Including (but not limited to) <a href=\"https:\/\/www.google.com\/search?q=Cross Site Scripting\" target=\"blank\">Cross Site Scripting<\/a> (XSS), and <a href=\"https:\/\/www.google.com\/search?q=data injection attacks\" target=\"blank\">data injection attacks<\/a>. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files."},"109":{"alertType":"Active","alertOtherInfo":"N\/A","alertName":"Source Code Disclosure - CVE-2012-1823","alertSolution":"Phase: Architecture and Design  Use an input validation framework such as <a href=\"https:\/\/www.google.com\/search?q=Struts framework\" target=\"blank\">Struts<\/a> or the <a href=\"https:\/\/www.google.com\/search?q=OWASP ESAPI Validation API\" target=\"blank\">OWASP ESAPI Validation API<\/a>.  Understand all the potential areas where untrusted inputs can enter your software: parameters or arguments, cookies, anything read from the network, environment variables, <a href=\"https:\/\/www.google.com\/search?q=reverse DNS lookups\" target=\"blank\">reverse DNS lookups<\/a>, query results, request headers, URL components, e-mail, files, databases, and any external systems that provide data to the application. Remember that such inputs may be obtained indirectly through API calls.  For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.  Even though client-side checks provide minimal benefits with respect to server-side security, they are still useful. First, they can support intrusion detection. If the server receives input that should have been rejected by the client, then it may be an indication of an attack. Second, client-side error-checking can provide helpful feedback to the user about the expectations for valid input. Third, there may be a reduction in server-side processing time for accidental input errors, although this is typically a small savings.  Do not rely exclusively on deny list validation to detect malicious input or to encode output. There are too many ways to encode the same character, so you're likely to miss some variants.  When your application combines data from multiple sources, perform the validation after the sources have been combined. The individual data elements may pass the validation step but violate the intended restrictions after they have been combined.  Assume all input is malicious. Use an \"<a href=\"https:\/\/www.google.com\/search?q=accept known good\" target=\"blank\">accept known good<\/a>\" <a href=\"https:\/\/www.google.com\/search?q=input validation\" target=\"blank\">input validation<\/a> strategy, i.e., use an allow list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a deny list). However, deny lists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.  When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if you are expecting colors such as \"red\" or \"blue.\"  Phase: Implementation  Be especially careful to validate your input when you invoke code that crosses language boundaries, such as from an interpreted language to native code. This could create an unexpected interaction between the language boundaries. Ensure that you are not violating any of the expectations of the language with which you are interfacing. For example, even though Java may not be susceptible to buffer overflows, providing a large argument in a call to native code might trigger an overflow.  Directly convert your input type into the expected data type, such as using a conversion function that translates a string into a number. After converting to the expected data type, ensure that the input's values fall within the expected range of allowable values and that multi-field consistencies are maintained.  Inputs should be decoded and <a href=\"https:\/\/www.google.com\/search?q=canonicalized\" target=\"blank\">canonicalized<\/a> to the application's current internal representation before being validated. Make sure that your application does not inadvertently decode the same input twice. Such errors could be used to bypass allow list schemes by introducing dangerous inputs after they have been checked. Use libraries such as the <a href=\"https:\/\/www.google.com\/search?q=OWASP ESAPI Canonicalization control\" target=\"blank\">OWASP ESAPI Canonicalization control<\/a>.  Consider performing repeated canonicalization until your input does not change any more. This will avoid double-decoding and similar scenarios, but it might inadvertently modify inputs that are allowed to contain properly-encoded dangerous content.  When exchanging data between components, ensure that both components are using the same character encoding. Ensure that the proper encoding is applied at each interface. Explicitly set the encoding you are using whenever the protocol allows you to do so.","alertReferences":["https:\/\/owasp.org\/www-community\/vulnerabilities\/Improper_Data_Validation","https:\/\/cheatsheetseries.owasp.org\/cheatsheets\/Input_Validation_Cheat_Sheet.html","https:\/\/cwe.mitre.org\/data\/definitions\/89.html"],"alertTechTargeted":"Language \/ PHP","alertCWEID":"20","alertID":"20017","alertWASCID":"20","alertRisk":"High","alertSummary":"Improper input handling is one of the most common weaknesses identified across applications today. Poorly handled input is a leading cause behind critical vulnerabilities that exist in systems and applications."},"83":{"alertType":"Passive","alertOtherInfo":"Warnings:\\nThis host name is unusual, and likely meant to be a keyword that is missing the required quotes: 'none'.","alertName":"CSP: Notices","alertSolution":"Ensure that your web server, application server, <a href=\"https:\/\/www.google.com\/search?q=load balancer\" target=\"blank\">load balancer<\/a>, etc. is properly configured to set the <a href=\"https:\/\/www.google.com\/search?q=Content-Security-Policy\" target=\"blank\">Content-Security-Policy<\/a> header.","alertReferences":["https:\/\/www.w3.org\/TR\/CSP\/","https:\/\/caniuse.com\/#search=content+security+policy","https:\/\/content-security-policy.com\/","https:\/\/github.com\/HtmlUnit\/htmlunit-csp","https:\/\/developers.google.com\/web\/fundamentals\/security\/csp#policy_applies_to_a_wide_variety_of_resources"],"alertTechTargeted":"All","alertCWEID":"693","alertID":"10055-3","alertWASCID":"15","alertRisk":"Low","alertSummary":"<a href=\"https:\/\/www.google.com\/search?q=Content Security Policy\" target=\"blank\">Content Security Policy<\/a> (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks. Including (but not limited to) <a href=\"https:\/\/www.google.com\/search?q=Cross Site Scripting\" target=\"blank\">Cross Site Scripting<\/a> (XSS), and <a href=\"https:\/\/www.google.com\/search?q=data injection attacks\" target=\"blank\">data injection attacks<\/a>. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files."},"84":{"alertType":"Passive","alertOtherInfo":"The following directives either allow wildcard sources (or ancestors), are not defined, or are overly broadly defined:  connect-src","alertName":"CSP: Wildcard Directive","alertSolution":"Ensure that your web server, application server, <a href=\"https:\/\/www.google.com\/search?q=load balancer\" target=\"blank\">load balancer<\/a>, etc. is properly configured to set the <a href=\"https:\/\/www.google.com\/search?q=Content-Security-Policy\" target=\"blank\">Content-Security-Policy<\/a> header.","alertReferences":["https:\/\/www.w3.org\/TR\/CSP\/","https:\/\/caniuse.com\/#search=content+security+policy","https:\/\/content-security-policy.com\/","https:\/\/github.com\/HtmlUnit\/htmlunit-csp","https:\/\/developers.google.com\/web\/fundamentals\/security\/csp#policy_applies_to_a_wide_variety_of_resources"],"alertTechTargeted":"All","alertCWEID":"693","alertID":"10055-4","alertWASCID":"15","alertRisk":"Medium","alertSummary":"<a href=\"https:\/\/www.google.com\/search?q=Content Security Policy\" target=\"blank\">Content Security Policy<\/a> (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks. Including (but not limited to) <a href=\"https:\/\/www.google.com\/search?q=Cross Site Scripting\" target=\"blank\">Cross Site Scripting<\/a> (XSS), and <a href=\"https:\/\/www.google.com\/search?q=data injection attacks\" target=\"blank\">data injection attacks<\/a>. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files."},"85":{"alertType":"Passive","alertOtherInfo":"<a href=\"https:\/\/www.google.com\/search?q=script-src\" target=\"blank\">script-src<\/a> includes <a href=\"https:\/\/www.google.com\/search?q=unsafe-inline\" target=\"blank\">unsafe-inline<\/a>.","alertName":"CSP: script-src unsafe-inline","alertSolution":"Ensure that your web server, application server, <a href=\"https:\/\/www.google.com\/search?q=load balancer\" target=\"blank\">load balancer<\/a>, etc. is properly configured to set the <a href=\"https:\/\/www.google.com\/search?q=Content-Security-Policy\" target=\"blank\">Content-Security-Policy<\/a> header.","alertReferences":["https:\/\/www.w3.org\/TR\/CSP\/","https:\/\/caniuse.com\/#search=content+security+policy","https:\/\/content-security-policy.com\/","https:\/\/github.com\/HtmlUnit\/htmlunit-csp","https:\/\/developers.google.com\/web\/fundamentals\/security\/csp#policy_applies_to_a_wide_variety_of_resources"],"alertTechTargeted":"All","alertCWEID":"693","alertID":"10055-5","alertWASCID":"15","alertRisk":"Medium","alertSummary":"<a href=\"https:\/\/www.google.com\/search?q=Content Security Policy\" target=\"blank\">Content Security Policy<\/a> (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks. Including (but not limited to) <a href=\"https:\/\/www.google.com\/search?q=Cross Site Scripting\" target=\"blank\">Cross Site Scripting<\/a> (XSS), and <a href=\"https:\/\/www.google.com\/search?q=data injection attacks\" target=\"blank\">data injection attacks<\/a>. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files."},"86":{"alertType":"Passive","alertOtherInfo":"<a href=\"https:\/\/www.google.com\/search?q=style-src\" target=\"blank\">style-src<\/a> includes <a href=\"https:\/\/www.google.com\/search?q=unsafe-inline\" target=\"blank\">unsafe-inline<\/a>.","alertName":"CSP: style-src unsafe-inline","alertSolution":"Ensure that your web server, application server, <a href=\"https:\/\/www.google.com\/search?q=load balancer\" target=\"blank\">load balancer<\/a>, etc. is properly configured to set the <a href=\"https:\/\/www.google.com\/search?q=Content-Security-Policy\" target=\"blank\">Content-Security-Policy<\/a> header.","alertReferences":["https:\/\/www.w3.org\/TR\/CSP\/","https:\/\/caniuse.com\/#search=content+security+policy","https:\/\/content-security-policy.com\/","https:\/\/github.com\/HtmlUnit\/htmlunit-csp","https:\/\/developers.google.com\/web\/fundamentals\/security\/csp#policy_applies_to_a_wide_variety_of_resources"],"alertTechTargeted":"All","alertCWEID":"693","alertID":"10055-6","alertWASCID":"15","alertRisk":"Medium","alertSummary":"<a href=\"https:\/\/www.google.com\/search?q=Content Security Policy\" target=\"blank\">Content Security Policy<\/a> (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks. Including (but not limited to) <a href=\"https:\/\/www.google.com\/search?q=Cross Site Scripting\" target=\"blank\">Cross Site Scripting<\/a> (XSS), and <a href=\"https:\/\/www.google.com\/search?q=data injection\" target=\"blank\">data injection<\/a> attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files."},"87":{"alertType":"Passive","alertOtherInfo":"<a href=\"https:\/\/www.google.com\/search?q=script-src\" target=\"blank\">script-src<\/a> includes <a href=\"https:\/\/www.google.com\/search?q=unsafe-hashes\" target=\"blank\">unsafe-hashes<\/a>, an attacker will be able to use any of the code covered by such <a href=\"https:\/\/www.google.com\/search?q=hashes cyber\" target=\"blank\">hashes<\/a>.","alertName":"CSP: script-src unsafe-hashes","alertSolution":"Ensure that your web server, application server, <a href=\"https:\/\/www.google.com\/search?q=load balancer\" target=\"blank\">load balancer<\/a>, etc. is properly configured to set the <a href=\"https:\/\/www.google.com\/search?q=Content-Security-Policy\" target=\"blank\">Content-Security-Policy<\/a> header.","alertReferences":["https:\/\/www.w3.org\/TR\/CSP3\/#unsafe-hashes-usage","https:\/\/content-security-policy.com\/examples\/allow-inline-script\/"],"alertTechTargeted":"All","alertCWEID":"693","alertID":"10055-7","alertWASCID":"15","alertRisk":"Medium","alertSummary":"<a href=\"https:\/\/www.google.com\/search?q=Content Security Policy\" target=\"blank\">Content Security Policy<\/a> (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks. Including (but not limited to) <a href=\"https:\/\/www.google.com\/search?q=Cross Site Scripting\" target=\"blank\">Cross Site Scripting<\/a> (XSS), and <a href=\"https:\/\/www.google.com\/search?q=data injection attacks\" target=\"blank\">data injection attacks<\/a>. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files."}}