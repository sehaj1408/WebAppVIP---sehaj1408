// JavaScript used for the Vulnerability Dictionary Page's functionality.


// Grab all boxes with the class "content-box" and loop through em, adding em to the hamburger button list
function dropdownToggle() {
    document.getElementById("dropdown-button").classList.toggle("hide-button");
    document.getElementById("dropdown-menu").classList.toggle("show-menu");
}

// Populates the page with the vulnerabilities and table of contents anchors
async function populateDict() {
    // Put the json object in vulnerabilityDict
    const response = await fetch("http://localhost:3030/get-vulnerability-dictionary-data");
    const vulnerabilityDict = await response.json();
    // Grab the element that will contain our entries
    const contentElement = document.getElementById("content-container");
    let contentHTML = "";

    // Go through all vulnerabilities in the json, with vulnNum as the key
    for (const vulnNum in vulnerabilityDict) {
        
        // Append header and content of each vulnerability
        contentHTML += getContentElement(vulnerabilityDict[vulnNum]);
    }
    contentElement.innerHTML = contentHTML;

    // Assign anchors for the table of contents
    createTableAnchors();

    // Code to scroll to the anchor
    let anchorQueryString = window.location.hash
    let anchor = document.getElementById(anchorQueryString.substring(1));
    if (anchor) {
        console.log("Anchor hit")
        anchor.scrollIntoView();
        console.log(anchor)
    }
}



// Creates the content element for a given vulnerability (the vulnerability info)
function getContentElement(vulnerability) {
    let headerName = "";
    // Modify vulnerability name if it's the child of another vulnerability
    if (vulnerability["alertID"].includes("-")) {
        headerName = vulnerability["alertName"] + " - " + vulnerability["alertID"].split("-")[1];
    }
    else {
        headerName = vulnerability["alertName"]
    }

    return `
    <div class="content-box">
        <div class="content-header" id="${vulnerability["alertID"]}">
            <span class="issue-circle" style="background-color: ${getRiskColor(vulnerability["alertRisk"])};"></span>
            ${headerName}
        </div>
        <h4>Type</h4>
        <p>${vulnerability["alertType"]}</p>
        <h4>Tech Targeted</h4>
        <p>${vulnerability["alertTechTargeted"]}</p>
        <h4>Risk</h4>
        <p>${vulnerability["alertRisk"]}</p>
        <h4>Alert Summary</h4>
        <p>${vulnerability["alertSummary"]}</p>
        <h4>Actionable Steps</h4>
        <p>${vulnerability["alertSolution"]}</p>
        <h4>ID</h4>
        <p>${vulnerability["alertID"]}</p>
        <h4>CWE ID</h4>
        <p>${vulnerability["alertCWEID"]}</p>
        <h4>WASC ID</h4>
        <p>${vulnerability["alertWASCID"]}</p>
        <h4>Other Info</h4>
        <p>${vulnerability["alertOtherInfo"]}</p>
        <h4>References</h4>
        <p>${vulnerability["alertReferences"]}</p>
    </div>
    `

}

// Function that returns a colour for a given alert level
function getRiskColor(riskLevel) {
    const riskColors = {
        "Low": "#f1c40f", // yellow
        "Medium": "#e67e22", // orange
        "High": "#e74c3c", // red
        "N/A": "#635e5d", //grey
        "Informational": "#1d6f42", //green
    };
    return riskColors[riskLevel];
}

// Automatically adds the anchors for the different sections to the Table of Contents.
function createTableAnchors() {
    // Want the main table to be a list, but not the button
    let tableHTML = "<ul>";
    let anchorHTML = "";
    // Grab the table of contents element
    let tableDiv = document.getElementById("table-of-contents");
    // Grab the dropdown box
    let anchorDiv = document.getElementById("anchor-div");
    // Grab all content header elements (these will be where the anchors point to)
    let contentBoxes = document.getElementsByClassName("content-header")
    // Go through all headers
    Array.from(contentBoxes).forEach((element, index) => {
        tableHTML += `
        <li><div class="anchor-link">

        ${index + 1}. <a href="#${element.id}">${element.textContent.trim()}</a>
        </div>
        </li>
        `
        anchorHTML += `
        <div class="anchor-link">

        ${index + 1}. <a href="#${element.id}">${element.textContent.trim()}</a>
        </div>`
    })
    anchorHTML += "</ul>"
    anchorDiv.innerHTML = anchorHTML;
    tableDiv.innerHTML = tableHTML;
}

populateDict();